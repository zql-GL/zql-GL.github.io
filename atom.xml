<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孤寡杂货铺</title>
  
  <subtitle>学习资料库</subtitle>
  <link href="https://zql-gl.github.io/atom.xml" rel="self"/>
  
  <link href="https://zql-gl.github.io/"/>
  <updated>2022-10-19T15:10:02.600Z</updated>
  <id>https://zql-gl.github.io/</id>
  
  <author>
    <name>从未</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java知识宝典</title>
    <link href="https://zql-gl.github.io/posts/2.html"/>
    <id>https://zql-gl.github.io/posts/2.html</id>
    <published>2022-10-19T15:00:00.000Z</published>
    <updated>2022-10-19T15:10:02.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java知识宝典"><a href="#Java知识宝典" class="headerlink" title="Java知识宝典"></a>Java知识宝典</h1><h2 id="Java基础知识"><a href="#Java基础知识" class="headerlink" title="Java基础知识"></a>Java基础知识</h2><h3 id="Java各个版本的区别"><a href="#Java各个版本的区别" class="headerlink" title="Java各个版本的区别"></a>Java各个版本的区别</h3><ul><li>在 Java5 中引入了一种主要用于数组的增强型 for 循环。</li><li>从Java7开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。</li></ul><h3 id="Java语法基础"><a href="#Java语法基础" class="headerlink" title="Java语法基础"></a>Java语法基础</h3><ul><li><p>标识符</p><ul><li>标识符就是变量、常量、方法、枚举、类、接口等由程序员指定的名字。构成标识符的字母均有一定的规范，Java语言中标识符的命名规则如下</li><li>01.区分大小写：Myname与myname是两个不同的标识符。</li><li><ol start="2"><li>首字符，可以是下划线（_）或美元符或字母，但不能是数字。</li></ol></li><li><ol start="3"><li>除首字符外其他字符，可以是下划线（_）、美元符、字母和数字。</li></ol></li><li><ol start="4"><li>关键字不能作为标识符。</li></ol></li></ul></li><li><p>Java关键字</p><ul><li><p>访问控制</p><ul><li>private    私有的</li><li>public    公共的</li><li>default    默认</li><li>protected    受保护的</li></ul></li><li><p>类、方法和变量修饰符</p><ul><li>abstract    声明抽象</li><li>class    类</li><li>extends    扩充,继承</li><li>final    最终值,不可改变的</li><li>implements    实现（接口）</li><li>interface    接口</li><li>native    本地，原生方法（非 Java 实现）</li><li>new    新,创建</li><li>static    静态</li><li>strictfp    严格,精准</li><li>synchronized    线程,同步</li><li>transient    短暂</li><li>volatile    易失</li></ul></li><li><p>程序控制语句</p><ul><li>break    跳出循环</li><li>case    定义一个值以供 switch 选择</li><li>continue    继续</li><li>do    运行</li><li>else    否则</li><li>for    循环</li><li>if    如果</li><li>instanceof    实例</li><li>return    返回</li><li>switch    根据值选择执行</li><li>while    循环</li></ul></li><li><p>错误处理</p><ul><li>assert    断言表达式是否为真</li><li>catch    捕捉异常</li><li>finally    有没有异常都执行</li><li>throw    抛出一个异常对象</li><li>throws    声明一个异常可能被抛出</li><li>try    捕获异常</li></ul></li><li><p>包相关</p><ul><li>import     引入</li><li>package    包</li></ul></li><li><p>基本类型</p><ul><li>boolean    布尔型</li><li>char    字符型</li><li>double    双精度浮点</li><li>byte    字节型</li><li>float    单精度浮点</li><li>int    整型</li><li>short    短整型</li><li>long    长整型</li></ul></li><li><p>变量引用</p><ul><li>super  父类，超类</li><li>void    无返回值</li><li>this    本类</li></ul></li></ul></li><li><p>保留关键字</p><ul><li>goto    是关键字，但不能使用</li><li>const    是关键字，但不能使用</li></ul></li><li><p>分隔符</p><ul><li>在Java源代码中，有一些字符被用作分隔，称为分隔符。分隔符主要有：分号（;）、左右大括号<br>（{}）和空白。</li></ul></li><li><p>Java的常量与变量</p><ul><li><p>Java常量</p><ul><li><p>常量在声明的同时需要赋予一个初始值，声明格式：final 数据类型 变量名 = 初始值;</p></li><li><p>使用final关键字来修饰常量，声明方式和变量类似，通常用大写字母表示常量</p></li><li><p>字符串常量包含在两个引号之间的字符序列，和字符变量都可以包含任何Unicode字符</p></li><li><p>定义变量的时候，如果加上final修饰符，这个变量就变成了常量</p></li><li><p>Java 的 null 不是关键字，类似于 true 和 false，它是一个字面常量，不允许作为标识符使用</p></li><li><p>分类</p><ul><li><p>静态常量</p><ul><li>在final 之前使用public static修饰，用来替代保留字const。</li><li>public static修饰的常量作用域是全局的，不需<br>要创建对象就可以访问它，在类外部访问形式：HelloWorld. PI   （类名.常量名）</li></ul></li><li><p>成员常量</p></li><li><p>局部常量</p></li></ul></li></ul></li><li><p>Java变量</p><ul><li><p>类变量（静态变量）：独立于方法之外的变量，用 static 修饰。</p><ul><li>类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。</li><li>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</li><li>静态变量除了被声明为常量外很少使用，静态变量是指声明为 public/private，final 和 static 类型的变量。静态变量初始化后不可改变。</li><li>静态变量储存在静态存储区。经常被声明为常量，很少单独使用 static 声明变量。</li><li>静态变量在第一次被访问时创建，在程序结束时销毁。</li><li>与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为 public 类型。</li><li>默认值和实例变量相似。数值型变量默认值是 0，布尔型默认值是 false，引用类型默认值是 null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</li><li>静态变量可以通过：ClassName.VariableName的方式访问。</li><li>类变量被声明为 public static final 类型时，类变量名称一般建议使用大写字母。如果静态变量不是 public 和 final 类型，其命名方式与实例变量以及局部变量的命名方式一致。</li></ul></li><li><p>实例（成员）变量：独立于方法之外的变量，不过没有 static 修饰。成员变量是在类体中，而在方法之外，作用域是整个类，如果没有赋初始值，系统使用默认值</p><ul><li>成员变量声明在一个类中，但在方法、构造方法和语句块之外；</li><li>当一个对象被实例化之后，每个实例变量的值就跟着确定；</li><li>成员变量在对象创建的时候创建，在对象被销毁的时候销毁；</li><li>成员变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；</li><li>实例变量可以声明在使用前或者使用后；</li><li>访问修饰符可以修饰实例变量；</li><li>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；</li><li>实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；</li><li>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObjectReference.VariableName。</li></ul></li><li><p>局部变量：是在方法或if、for和while等代码块中声明的变量。</p><ul><li>局部变量声明在方法、构造方法或者语句块中；</li><li>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；</li><li>访问修饰符不能用于局部变量；</li><li>局部变量只在声明它的方法、构造方法或者语句块中可见；</li><li>局部变量是在栈上分配的。</li><li>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</li></ul></li></ul></li></ul></li></ul><h3 id="Java编码规范"><a href="#Java编码规范" class="headerlink" title="Java编码规范"></a>Java编码规范</h3><ul><li><p>命名规范（驼峰命名）</p><ul><li><p>小驼峰命名</p><ul><li>小驼峰法就是第一个单词是全部小写，后面的单词首字母大写</li></ul></li><li><p>大驼峰命名</p><ul><li>大驼峰法是第一个单词的首字母也大写</li></ul></li><li><p>除了包和常量外，Java编码规范命名方法采用驼峰法</p><ul><li>包名：包名是全小写字母，中间可以由点分隔开。作为命名空间，包名应该具有唯一性</li><li>常量名：全大写，如果是由多个单词构成，可以用下划线隔开如YEAR和WEEK_OF_MONTH。</li><li>类和接口名：采用大驼峰法</li><li>文件名：采用大驼峰法</li><li>变量：采用小驼峰法</li><li>方法名：采用小驼峰法</li></ul></li></ul></li><li><p>注释规范</p><ul><li><p>文档注释：/**    */</p><ul><li>文档注释就是指这种注释内容能够生成API帮助文档，JDK中javadoc命令能够提取这些注释信息并生成HTML文件。文档注释主要对类（或接口）、实例变量、静态变量、实例方法和静态方法等进行注释。</li><li>生成文档后，会生成很多HTML文件，其中的index.html文件是文档的入口</li></ul></li><li><p>多行注释</p><ul><li>/*   */</li></ul></li><li><p>单行注释</p><ul><li>//</li></ul></li></ul></li><li><p>代码排版</p><ul><li><p>空行用以将逻辑相关的代码段分隔开，以提高可读性，空行使用规范：</p><ul><li><ol><li>类声明和接口声明之间保留两个空行</li></ol></li><li><ol start="2"><li>两个方法之间保留一个空行</li></ol></li><li><ol start="3"><li>方法的第一条语句之前保留一个空行</li></ol></li><li><ol start="4"><li>代码注释（尾端注释外）之前保留一个空行</li></ol></li><li><ol start="5"><li>一个方法内的两个逻辑段之间</li></ol></li></ul></li><li><p>代码中的有些位置是需要有空格的，空格的规范：</p><ul><li><ol><li>赋值符号“=”前后各有一个空格</li></ol></li><li><ol start="2"><li>所有的二元运算符都应该使用空格与操作数分开</li></ol></li><li><ol start="3"><li>一元操作符：负号“-”、自增“++”和自减“–”等，它们与操作数之间没有空格</li></ol></li><li><ol start="4"><li>小左括号“(”之后，小右括号“)”之前不应有空格</li></ol></li><li><ol start="5"><li>大左括号“{”之前有一个空格</li></ol></li><li><ol start="6"><li>方法参数列表小左括号“(”之前没有空格，小右括号“)”之后有一个空格，参数列表中参数逗号“,”之后也有一个空格。</li></ol></li><li><ol start="7"><li>关键字之后紧跟着小左括号“(”，关键字之后应该有一个空格</li></ol></li></ul></li><li><p>缩进的规范</p><ul><li><ol><li>在方法、Lambda、控制语句等包含大括号“{}”的代码块中，代码块的内容相对于首行缩进一个级别（4个空格）</li></ol></li><li><ol start="2"><li>如果是if语句中条件表达式的断行，那么新的一行应该相对于上一行缩进两个级别（8个空<br>格），再往后的断行要与第一次的断行对齐</li></ol></li></ul></li><li><p>一行代码的长度应尽量不要超过80个字符，如果超过则需断行，断行的规范</p><ul><li><ol><li>在一个逗号后面断开。</li></ol></li><li><ol start="2"><li>在一个操作符前面断开，要选择较高级别的运算符（而非较低级别的运算符）断开。</li></ol></li><li><ol start="3"><li>新的一行应该相对于上一行缩进两个级别（8个空格）。</li></ol></li></ul></li><li><p>其他规范</p><ul><li><ol><li>在声明变量或常量时推荐一行一个声明</li></ol></li><li><ol start="2"><li>左大括号“{”位于声明语句同行的末尾。右大括号“}”另起一行，与相应的声明语句对齐，除非<br>是一个空语句，右大括号“}”应紧跟在左大括号“{”之后</li></ol></li><li><ol start="3"><li>每行至多包含一条语句</li></ol></li><li><ol start="4"><li>虽然Java语言允许if、for等控制语句只有一行代码情况下，省略左右两个大括号，但是编码规范并不推荐这样使用</li></ol></li></ul></li></ul></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li><p>基本数据类型</p><ul><li><p>数值类型</p><ul><li><p>整数类型（默认int）</p><ul><li>byte：8位，默认是0</li><li>short：2个字节，默认是0</li><li>int：4个字节，默认是0</li><li>long：8个字节，默认是0L</li></ul></li><li><p>浮点数类型（默认double）</p><ul><li>float：4个字节，默认是0.0f</li><li>double：8个字节,默认是0.0d</li></ul></li><li><p>字符类型</p><ul><li>char:2个字节，范围\u0000(0)~\uffff(65535),默认值是’u0000’</li><li>字符常量必须用单引号括起来的单个字<br>符</li></ul></li></ul></li><li><p>布尔类型</p><ul><li>boolean：true or  false,默认是false</li></ul></li><li><p>转义字符</p><ul><li>\n:换行（0x0a）</li><li>\r：回车（0x0d）</li><li>\t    制表符</li><li>\f：换页符（0x0c）</li><li>\b    退格 (0x08)</li><li>\0    空字符 (0x0)</li><li>\s    空格 (0x20)</li><li>"    双引号</li><li>'    单引号</li><li>\    反斜杠</li><li>\ddd    八进制字符 (ddd)</li><li>\uxxxx    16进制Unicode字符 (xxxx)</li></ul></li><li><p>数据类型转换</p><ul><li><p>自动类型转换</p><ul><li>整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。<br>转换从低级到高级：byte,short,char—&gt; int —&gt; long—&gt; float —&gt; double </li><li>规则：1. 不能对boolean类型进行类型转换。</li></ul></li></ul></li></ul></li></ul><ol start="2"><li><p>不能把对象类型转换成不相关类的对象。</p></li><li><p>在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</p></li><li><p>转换过程中可能导致溢出或损失精度</p></li><li><p>浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入</p><pre><code> - 强制类型转换     - 1. 条件是转换的数据类型必须是兼容的。     - 2. 格式：(type)value type是要强制类型转换后的数据类型  - 隐含强制类型转换     - 1、 整数的默认类型是 int。     - 2. 小数默认是 double 类型浮点型，在定义 float 类型时必须在数字后面跟上 F 或者 f。</code></pre><ul><li><p>数字表示方式</p><ul><li><p>进制数字表示方式</p><ul><li>二进制数：以 0b 或0B为前缀，注意0是阿拉伯数字，不要误认为是英文字母o。</li><li>八进制数：以0为前缀，注意0是阿拉伯数字。</li><li>十六进制数：以 0x 或0X为前缀，注意0是阿拉伯数字</li></ul></li><li><p>指数表示</p><ul><li>如果采用十进制表示指数，需要使用大写或小写的e表示幂，e2表示10的2次方。</li></ul></li></ul></li></ul></li></ol><ul><li><p>引用数据类型（String）引用数据类型变量中保持的是指向对象的内存地址</p><ul><li>类</li><li>接口</li><li>数组</li></ul></li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li><p>算术运算符</p><ul><li>+、-、*、/、%、++、–</li><li>前缀自增自减法(++a,–a): 先进行自增或者自减运算，再进行表达式运算。</li><li>后缀自增自减法(a++,a–): 先进行表达式运算，再进行自增或者自减运算 </li></ul></li><li><p>关系运算符</p><ul><li>==、!=、&gt;、&lt;、&gt;=、&lt;=</li></ul></li><li><p>位运算符</p><ul><li>&amp;、|、^、~、&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</li></ul></li><li><p>逻辑运算符</p><ul><li>&amp;&amp;、||、!</li></ul></li><li><p>其他运算符</p><ul><li><p>三元运算符 (?:)</p><ul><li>variable x = (expression) ? value if true : value if false</li></ul></li><li><p>instanceof 运算符</p><ul><li>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）</li><li>instanceof运算符使用格式:( Object reference variable ) instanceof  (class/interface type)</li></ul></li></ul></li><li><p>赋值运算符</p><ul><li>=、+=、-=、*=、/=、(%)=、&lt;&lt;=、&gt;&gt;=、&amp;=、^=、|=</li></ul></li></ul><h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><ul><li><p>Java条件语句</p><ul><li><p>if语句</p><ul><li>if(布尔表达式)<br>{<br>//如果布尔表达式为true将执行的语句<br>}</li><li>如果布尔表达式的值为 true，则执行 if 语句中的代码块，否则执行 if 语句块后面的代码。</li></ul></li><li><p>if…else语句</p><ul><li>if(布尔表达式){<br>//如果布尔表达式的值为true<br>}else{<br>//如果布尔表达式的值为false<br>}</li><li>if 语句后面可以跟 else 语句，当 if 语句的布尔表达式值为 false 时，else 语句块会被执行。</li></ul></li><li><p>if…else if…else 语句</p><ul><li>if(布尔表达式 1){<br>//如果布尔表达式 1的值为true执行代码<br>}else if(布尔表达式 2){<br>//如果布尔表达式 2的值为true执行代码<br>}else if(布尔表达式 3){<br>//如果布尔表达式 3的值为true执行代码<br>}else {<br>//如果以上布尔表达式都不为true执行代码<br>}</li><li>if 语句至多有 1 个 else 语句，else 语句在所有的 else if 语句之后。</li><li>if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。</li><li>一旦其中一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行。</li></ul></li><li><p>嵌套的 if…else 语句</p><ul><li>if(布尔表达式 1){<br>////如果布尔表达式 1的值为true执行代码<br>if(布尔表达式 2){<br>////如果布尔表达式 2的值为true执行代码<br>}<br>}</li><li>使用嵌套的 if…else 语句是合法的。也就是说你可以在另一个 if 或者 else if 语句中使用 if 或者 else if 语句。</li></ul></li></ul></li><li><p>Java循环结构</p><ul><li><p>while 循环</p><ul><li>while( 布尔表达式 ) {<br>//循环内容<br>}</li><li>只要布尔表达式为 true，循环就会一直执行下去</li></ul></li><li><p>do…while 循环</p><ul><li>do {<br>//代码语句<br>}while(布尔表达式);</li><li>对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。</li><li>布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。</li></ul></li><li><p>for 循环</p><ul><li>for(初始化; 布尔表达式; 更新) {<br>//代码语句<br>}</li><li>最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</li><li>然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。</li><li>执行一次循环后，更新循环控制变量。</li><li>再次检测布尔表达式。循环执行上面的过程。</li></ul></li><li><p>Java 增强 for 循环</p><ul><li>Java5 引入了一种主要用于数组的增强型 for 循环。</li><li>for(声明语句 : 表达式)<br>{<br>//代码句子<br>}</li><li>声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</li><li>表达式：表达式是要访问的数组名，或者是返回值为数组的方法。</li></ul></li><li><p>break 关键字</p><ul><li>break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。</li><li>break 跳出最里层的循环，并且继续执行该循环下面的语句。</li></ul></li><li><p>continue 关键字</p><ul><li>continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。</li><li>在 for 循环中，continue 语句使程序立即跳转到更新语句。</li><li>在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。</li></ul></li></ul></li><li><p>switch case 语句</p><ul><li><p>switch(expression){<br>case value :<br> //语句<br> break; //可选<br>case value :<br> //语句<br> break; //可选<br>//你可以有任意数量的case语句<br>default : //可选<br> //语句<br>}</p></li><li><p>规则</p><ul><li>switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。</li><li>switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。</li><li>case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。</li><li>当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。</li><li>当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。</li><li>switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。</li></ul></li><li><p>switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。</p></li></ul></li></ul><h3 id="Java修饰符"><a href="#Java修饰符" class="headerlink" title="Java修饰符"></a>Java修饰符</h3><ul><li><p>访问控制修饰符 : default, public , protected, private</p><ul><li>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</li><li>default (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li>private : 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）私有访问修饰符是最严格的访问级别，所以被声明为 private 的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为 private。</li><li>public : 对所有类可见。使用对象：类、接口、变量、方法</li><li>protected : 对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）基类的 protected 成员是包内可见的，并且对子类可见；<br>若子类与基类不在同一包中，那么在子类中，子类实例可以访问其从基类继承而来的protected方法，而不能访问基类实例的protected方法。</li></ul></li><li><p>非访问控制修饰符 : final, abstract, static, synchronized</p><ul><li><p>static 修饰符，用来修饰类方法和类变量。</p><ul><li>静态变量：static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</li><li>静态方法：static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</li><li>对类变量和方法的访问可以直接使用 classname.variablename 和 classname.methodname 的方式访问。</li></ul></li><li><p>final 修饰符，用来修饰类、方法和变量</p><ul><li>final 修饰的类不能够被继承，父类中的 final 方法可以被子类继承，但是不能被子类重写。修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</li></ul></li><li><p>abstract 修饰符，用来创建抽象类和抽象方法。</p><ul><li>抽象类：抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。抽象类可以包含抽象方法和非抽象方法。</li><li>抽象方法：抽象方法是一种没有任何实现的方法，该方法的具体实现由子类提供。抽象方法不能被声明成 final 和 static。任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。抽象方法的声明以分号结尾，例如：public abstract sample();。</li></ul></li><li><p>synchronized 和 volatile 修饰符，主要用于线程的编程。</p><ul><li>synchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。</li><li>序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。</li><li>volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。一个 volatile 对象引用可能是 null</li></ul></li></ul></li><li><p>访问控制和继承</p><ul><li>父类中声明为 public 的方法在子类中也必须为 public。</li><li>父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。</li><li>父类中声明为 private 的方法，不能够被子类继承。</li></ul></li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h2 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h2><h2 id="Java高级教程"><a href="#Java高级教程" class="headerlink" title="Java高级教程"></a>Java高级教程</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java知识宝典&quot;&gt;&lt;a href=&quot;#Java知识宝典&quot; class=&quot;headerlink&quot; title=&quot;Java知识宝典&quot;&gt;&lt;/a&gt;Java知识宝典&lt;/h1&gt;&lt;h2 id=&quot;Java基础知识&quot;&gt;&lt;a href=&quot;#Java基础知识&quot; class=&quot;head</summary>
      
    
    
    
    <category term="生活" scheme="https://zql-gl.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="知识文档" scheme="https://zql-gl.github.io/tags/%E7%9F%A5%E8%AF%86%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>博客与博主</title>
    <link href="https://zql-gl.github.io/posts/1.html"/>
    <id>https://zql-gl.github.io/posts/1.html</id>
    <published>2022-08-20T13:00:00.000Z</published>
    <updated>2022-08-23T14:25:25.998Z</updated>
    
    <content type="html"><![CDATA[<p>相遇皆是缘分</p><h3 id="为什么建博客？"><a href="#为什么建博客？" class="headerlink" title="为什么建博客？"></a>为什么建博客？</h3><p>想拥有一个自己的博客，好进行装逼!</p><h3 id="展望博客"><a href="#展望博客" class="headerlink" title="展望博客"></a>展望博客</h3><p>将一些自己搜集到的资料或学习到的东西整理成博客，上传上来，方便查阅。</p><h3 id="关于博主"><a href="#关于博主" class="headerlink" title="关于博主"></a>关于博主</h3><p>我取名叫从未，这是源于一句话，你喜欢过我吗？– 从未 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 《自由与爱情》---作者:裴多菲​ 生命诚可贵​ 爱情价更高​ 若为自由故​ 二者皆可抛<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>溜溜球啦！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;相遇皆是缘分&lt;/p&gt;
&lt;h3 id=&quot;为什么建博客？&quot;&gt;&lt;a href=&quot;#为什么建博客？&quot; class=&quot;headerlink&quot; title=&quot;为什么建博客？&quot;&gt;&lt;/a&gt;为什么建博客？&lt;/h3&gt;&lt;p&gt;想拥有一个自己的博客，好进行装逼!&lt;/p&gt;
&lt;h3 id=&quot;展望博客&quot;&gt;</summary>
      
    
    
    
    <category term="生活" scheme="https://zql-gl.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="想法" scheme="https://zql-gl.github.io/tags/%E6%83%B3%E6%B3%95/"/>
    
  </entry>
  
</feed>
