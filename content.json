{"meta":{"title":"孤寡杂货铺","subtitle":"学习资料库","description":"众里寻她千百度。蓦然回首，那人却在，灯火阑珊处。","author":"从未","url":"https://zql-gl.github.io","root":"/"},"pages":[{"title":"关于本站","date":"2020-04-19T04:58:56.000Z","updated":"2022-08-22T12:07:00.999Z","comments":false,"path":"about/index.html","permalink":"https://zql-gl.github.io/about/index.html","excerpt":"","text":"曲终人未散“ 为一个不可能的缘，等一个不可能的人。许一个不可能的愿，留一个不可能的念。 “ 从未离去！ 纸凉薄，写我半生彷惶;一纸沧桑，书我一世独殇;一纸微黄;记我此生风霜 伤感 。 寒雨绵绵夜何长，漫漫长夜吾孤赏；天阶夜色凉如水，斜风细雨不得归 离别 。 因为生活太无常，故此努力保留琐碎的东西，抓住它们，也似抓住了根 摆烂 。 联系我QQ：1732065436 （又是emo的一天！） 座右铭：十年生死两茫茫，不思量，自难忘。"},{"title":"标签","date":"2020-11-24T07:14:39.000Z","updated":"2021-07-26T14:44:42.337Z","comments":false,"path":"tags/index.html","permalink":"https://zql-gl.github.io/tags/index.html","excerpt":"","text":""},{"title":"archives","date":"2019-10-24T16:00:00.000Z","updated":"2021-06-27T12:40:24.587Z","comments":true,"path":"archives/index.html","permalink":"https://zql-gl.github.io/archives/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-11-24T07:12:19.000Z","updated":"2021-07-26T14:44:28.785Z","comments":false,"path":"categories/index.html","permalink":"https://zql-gl.github.io/categories/index.html","excerpt":"","text":""},{"title":"留言板","date":"2020-10-31T02:11:28.000Z","updated":"2021-11-23T10:50:01.880Z","comments":false,"path":"comments/index.html","permalink":"https://zql-gl.github.io/comments/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-06-07T14:17:49.000Z","updated":"2021-07-27T07:31:10.990Z","comments":true,"path":"link/index.html","permalink":"https://zql-gl.github.io/link/index.html","excerpt":"","text":""},{"title":"我的歌单","date":"2019-05-17T08:14:00.000Z","updated":"2021-07-26T13:06:52.537Z","comments":true,"path":"music/index.html","permalink":"https://zql-gl.github.io/music/index.html","excerpt":"","text":""},{"title":"","date":"2019-08-10T08:41:10.000Z","updated":"2021-07-26T07:32:29.746Z","comments":false,"path":"List/movies/index.html","permalink":"https://zql-gl.github.io/List/movies/index.html","excerpt":"","text":"励志视频"},{"title":"Music-BBOX","date":"2020-04-23T04:58:56.000Z","updated":"2021-07-26T07:32:21.052Z","comments":false,"path":"List/music/index.html","permalink":"https://zql-gl.github.io/List/music/index.html","excerpt":"","text":""},{"title":"相册","date":"2022-08-26T17:08:11.290Z","updated":"2022-08-26T17:08:11.290Z","comments":false,"path":"List/gallery/index.html","permalink":"https://zql-gl.github.io/List/gallery/index.html","excerpt":"","text":"秀色可餐 被欲望蒙蔽的人 古风流年 你是我古风里的墨，长词勾勒。你是我古风里的山河，落笔成客。你是我借韵描摹的那一抹砚中水色，谁来与和？若今生倾酒醉我半身萧瑟，与你折月写尽诗中平仄，聚散离合。"},{"title":"","date":"2021-09-28T14:56:14.000Z","updated":"2022-08-23T14:19:16.439Z","comments":false,"path":"List/gallery/ohmygirl/index.html","permalink":"https://zql-gl.github.io/List/gallery/ohmygirl/index.html","excerpt":"","text":""},{"title":"","date":"2021-09-28T14:56:13.000Z","updated":"2021-10-14T02:11:35.135Z","comments":false,"path":"List/gallery/wallpaper/index.html","permalink":"https://zql-gl.github.io/List/gallery/wallpaper/index.html","excerpt":"","text":""}],"posts":[{"title":"Java基础知识","slug":"03.Java面向对象","date":"2022-10-23T15:00:00.000Z","updated":"2022-10-23T11:33:34.658Z","comments":true,"path":"posts/3.html","link":"","permalink":"https://zql-gl.github.io/posts/3.html","excerpt":"","text":"Java面向对象面向对象基础三个基本特性 封装 封装能够使外部访问者不能随意存取对象的内部数据，隐藏了对象的内部细节，只保留有限的对外接口。外部访问者不用关心对象的内部细节，使得操作对象变得简单 继承 在Java语言中一般类称为“父类”，特殊类称为“子类”。Java语言是单继承的，即只能有一个父类，但Java可以实现多个接口，可以防止多继承所引起的冲突问题 多态 多态性是指在父类中成员变量和成员方法被子类继承之后，可以具有不同的状态或表现行为 类 类是Java中的一种重要的引用数据类型，是组成Java程序的基本要素。它封装了一类对象的数据和操作。 Java语言中一个类的实现包括：类声明和类体。类声明语法格式如下：[public][abstract|final] class className [extends superclassName] [implements interfaceNameList] {//类体} class是声明类的关键字，className是自定义的类名；class前面的修饰符public、abstract、final用来声明类，它们可以省略，它们的具体用法后面章节会详细介绍；superclassName为父类名，可以省略，如果省略则该类继承Object类，Object类所有类的根类，所有类都直接或间接继承Object；interfaceNameList是该类实现的接口列表，可以省略，接口列表中的多个接口之间用逗号分隔 类体是类的主体，包括数据和操作，即成员变量和成员方法。 成员变量 声明类体中成员变量语法格式如下：class className {[public | protected | private ] [static] [final] type variableName; //成员变量} - type是成员变量数据类型，variableName是成员变量名。type前的关键字都是成员变量修饰符，它们说明如下： - 01. public、protected和private修饰符用于封装成员变量。 - 02. static修饰符用于声明静态变量，所以静态变量也称为“类变量”。 - 03. final修饰符用于声明变量，该变量不能被修改 成员方法 声明类体中成员方法语法格式如下：class className {[public | protected | private ] [static] [final | abstract] [native] [synchronized]type methodName([paramList]) [throws exceptionList] {//方法体}} - type是方法返回值数据类型，methodName是方法名。type前的关键字都是方法修饰符，它们说明如下： - 01. public、protected和private修饰符用于封装方法。 - 02. static修饰符用于声明静态方法，所以静态方法也称为“类方法”。 - 03. final | abstract不能同时修饰方法，final修饰的方法不能在子类中被覆盖；abstract用来修饰抽象方法，抽象方法必须在子类中被实现。 - 04. native修饰的方法，称为“本地方法”，本地方法调用平台本地代码（如：C或C++编写的代 码），不能实现跨平台。 - 05. synchronized修饰的方法是同步的，当多线程方式同步方法时，只能串行地执行，保证是线程安全的。 - 06.方法声明中还有([paramList])部分，它是方法的参数列表。throws exceptionList是声明抛出异常列表。 - 如果方法返回值类型为void时，方法体包含“return;”语句，如果“return;”语句是最后一行则可以省略。通常return语句通常用在一个方法体的最后，否则会产生编译错误，除非用在if-else语句 包 作用 在Java中为了防止类、接口、枚举和注释等命名冲突引用了包（package）概念，包本质上命名空间（namespace） 。在包中可以定义一组相关的类型（类、接口、枚举和注释），并为它们提供访问保护和命名空间管理。 包定义 Java中使用package语句定义包，package语句应该放在源文件的第一行，在每个源文件中只能有一个包定义语句，并且package语句适用于所有类型（类、接口、枚举和注释）的文件。定义包语法格式如下：packagepkg1[.pkg2[.pkg3…]]; 包引入 使用import语句实现引入包，import语句应位于package语句之后，所有类的定义之前，可以有0~n条import语句，其语法格式为：import package1[.package2…].(类型名|*); “包名.类型名”形式只引入具体类型，“包名.*”采用通配符，表示引入这个包下所有的类型。 常用包 Java SE提供一些常用包，其中包含了Java开发中常用的基础类。这些包有：java.lang、java.io、java.net、java.util、java.text、java.awt和javax.swing。 java.lang包 java.lang包含中包含了Java语言的核心类，如Object、Class、String、包装类和Math等，还有包装类Boolean、Character、Integer、Long、Float和Double。使用java.lang包中的类型，不需要显示使用import语句引入，它是由解释器自动引入。 java.io包 java.io包含中提供多种输入/输出流类，如InputStream、OutputStream、Reader和Writer。还有文件管理相关类和接口，如File和FileDescriptor类以及FileFilter接口。 java.net包 java.net包含进行网络相关的操作的类，如URL、Socket和ServerSocket等。 java.util包 java.util包含一些实用工具类和接口，如集合、日期和日历相关类和接口。 java.text包 java.text包中提供文本处理、日期式化和数字格式化等相关类和接口。 java.awt和javax.swing包 java.awt和javax.swing包提供了Java图形用户界面开发所需要的各种类和接口。java.awt提供是一些基础类和接口，javax.swing提供了一些高级组件。 方法重载 在设计一个类时将具有相似功能的方法起相同的名字。方法重载中参数列表不同的含义是：参数的个数不同或者是参数类型不同 这些相同名字的方法之所以能够在一个类中同时存在，是因为它们的方法参数列表，调用时根据参数列表调用相应重载方法 封装性与访问控制 访问控制修饰符 : default, public , protected, private Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。 default (默认级别）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。 private （私有级别）: 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）私有访问修饰符是最严格的访问级别，所以被声明为 private 的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为 private。 public（公有级别） : 对所有类可见。使用对象：类、接口、变量、方法 protected （保护级别）: 对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）基类的 protected 成员是包内可见的，并且对子类可见；若子类与基类不在同一包中，那么在子类中，子类实例可以访问其从基类继承而来的protected方法，而不能访问基类实例的protected方法。 非访问控制修饰符 : final, abstract, static, synchronized static 修饰符，用来修饰类方法和类变量。 静态变量：static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。 静态方法：static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。 对类变量和方法的访问可以直接使用 classname.variablename 和 classname.methodname 的方式访问。 final 修饰符，用来修饰类、方法和变量 final 修饰的类不能够被继承，父类中的 final 方法可以被子类继承，但是不能被子类重写。修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。 abstract 修饰符，用来创建抽象类和抽象方法。 抽象类：抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。抽象类可以包含抽象方法和非抽象方法。 抽象方法：抽象方法是一种没有任何实现的方法，该方法的具体实现由子类提供。抽象方法不能被声明成 final 和 static。任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。抽象方法的声明以分号结尾，例如：public abstract sample();。 synchronized 和 volatile 修饰符，主要用于线程的编程。 synchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。 序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。 volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。一个 volatile 对象引用可能是 null 访问控制和继承 父类中声明为 public 的方法在子类中也必须为 public。 父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。 父类中声明为 private 的方法，不能够被子类继承。 访问类成员 访问成员有两种方式：一种是调用，即通过类或对象调用它的成员，如p.printX()语句；另一种是继承，即子类继承父类的成员变量和方法 公有访问级别任何情况下两种方式都可以； 默认访问级别在同一包中两种访问方式都可以，不能在包之外访问； 保护访问级别在同一包中与默认访问级别一样，两种访问方式都可以。但是在不同包之外只能继承访问； 私有访问级别只能在本类中通过调用方法访问，不能继承访问。 访问类成员时，在能满足使用的前提下，应尽量限制类中成员的可见性，访问级别顺序是：私有级别→默认级别→保护级别→公有级别。 静态变量和静态方法 static修饰的成员变量是静态变量，staitc修饰的方法是静态方法，没有static修饰的成员变量是实例变量，没有staitc修饰的方法是实例方法， 静态方法可以访问静态变量和其他静态方法，实例方法可以访问实例变量、其他实例方法、静态变量和静态方法 静态代码块 静态变量可以在声明的同时初始化，如果初始化静态变量不是简单常量，需要进行计算才能初始化，可以使用静态（static）代码块，静态代码块在类第一次加载时执行，并只执行一次 在静态代码块中可以初始化静态变量，也可以调用静态方法。 对象创建对象 类实例化可生成对象，实例方法就是对象方法，实例变量就是对象属性。一个对象的生命周期包括三个阶段：创建、使用和销毁；创建对象包括两个步骤：声明和实例化。 声明 声明对象与声明普通变量没有区别，语法格式如下：type objectName;其中type是引用类型，即类、接口和数组 实例化 实例化过程分为两个阶段：为对象分配内存空间和初始化对象，首先使用new运算符为对象分配内存空间，然后再调用构造方法初始化对象。示例代码如下：String name;name = new String(“Hello World”); 空对象 一个引用变量没有通过new分配内存空间，这个对象就是空对象，Java使用关键字null表示空对象，引用变量默认值是null。当试图调用一个空对象的实例变量或实例方法时，会抛出空指针异常NullPointerException 构造方法 构造方法是类中特殊方法，用来初始化类的实例变量，这个就是构造方法，它在创建对象（new运算符）之后自动调用。 构造方法名必须与类名相同。 构造方法没有任何返回值，包括void。 构造方法只能与new运算符结合使用。 this关键字 this指向对象本身，一个类可以通过this来获得一个代表它自身的对象变量。this使用在如下三种情况中： 调用实例变量。 参数是作用域为整个方法的局部变量，为了防止局部变量与成员变量命名发生冲突，可以使用this调用成员变量 调用实例方法。 this也可以调用本对象的方法 调用其他构造方法 使用this调用其他构造方法时，this语句一定是该构造方法的第一条语句 对象销毁 对象不再使用时应该销毁，Java语言对象是由垃圾回收器（Garbage Collection）收集然后释放 垃圾回收器（Garbage Collection）的工作原理是：当一个对象的引用不存在时，认为该对象不再需要，垃圾回收器自动扫描对象的动态内存区，把没有引用的对象作为垃圾收集起来并释放。 继承与多态Java中的继承 继承使用的关键字是extends，extends后面的是父类，如果在类的声明中没有使用extends关键字指明其父类，则默认父类为Object类，java.lang.Object类是Java的根类，所有Java类包括数组都直接或间接继承了Object类，Object类中定义了一些有关面向对象机制的基本方法，如equals()、toString()和finalize()等方法。 在Java中，类的继承只能是单继承，而多重继承可以通过实现多个接口实现 调用父类构造方法 当子类实例化时，不仅需要初始化子类成员变量，也需要初始化父类成员变量，初始化父类成员变量需要调用父类构造方法，子类使用super关键字调用父类构造方法 super语句必须位于子类构造方法的第一行 如果构造方法没有super语句，编译器会试图调用父类默认构造方法（无参数构造方法），如果父类Person也没有默认构造方法，那么会发生编译错误。解决这个编译错误有三种办法： 在父类Person中添加默认构造方法，子类Student会隐式调用父类的默认构造方法。 在子类Studen构造方法添加super语句，显式调用父类构造方法，super语句必须是第一条语句。 在子类Studen构造方法添加this语句，显式调用当前对象其他构造方法，this语句必须是第一条语句。 成员变量隐藏和方法覆盖 成员变量隐藏 子类成员变量与父类一样，会屏蔽父类中的成员变量，称为“成员变量隐藏”；如果要调用父类中的x成员变量，则需要super关键字， 方法的覆盖（Override） 如果子类方法完全与父类方法相同，即：相同的方法名、相同的参数列表和相同的返回值，只是方法体不同，这称为子类覆盖（Override）父类方法。表示子类重写了父类的方法 在声明方法时添加@Override注解@Override注解不是方法覆盖必须的，它只是锦上添花，但添加@Override注解有两个好处： 提高程序的可读性。 编译器检查@Override注解的方法在父类中是否存在，如果不存在则报错 方法覆盖时应遵循的原则： 覆盖后的方法不能比原方法有更严格的访问控制（可以相同）。 覆盖后的方法不能比原方法产生更多的异常。 多态 多态概念 发生多态要有三个前提条件： 继承。多态发生一定要子类和父类之间。 覆盖。子类覆盖了父类的方法。 声明的变量类型是父类类型，但实例则指向子类实例。 多态发生时，Java虚拟机运行时根据引用变量指向的实例调用它的方法，而不是根据引用变量的类型调用。 引用类型检查 有时候需要在运行时判断一个对象是否属于某个引用类型，这时可以使用instanceof运算符，instanceof运算符语法格式如下：obj instanceof type 其中obj是一个对象，type是引用类型，如果obj对象是type引用类型实例则返回true，否则false。 引用类型转换 引用类型可以进行转换，但并不是所有的引用类型都能互相转换，只有属于同一棵继承层次树中的引用类型才可以转换 引用类型转换也是通过小括号运算符实现，类型转换有两个方向：将父类引用类型变量转换为子类类型，这种转换称为向下转（downcast）；将子类引用类型变量转换为父类类型，这种转换称为向上转型（upcast）。向下转型需要强制转换，而向上转型是自动的。 final关键字 final修饰变量 final修饰的变量即成为常量，无论是哪种常量都只能赋值一次，但是final所修饰局部变量和成员变量有所不同。 final修饰的局部变量必须使用之前被赋值一次才能使用。 final修饰的成员变量在声明时没有赋值的叫“空白final变量”。空白final变量必须在构造方法或静态代码块中初始化。 其实局部常量最好在声明的同时初始化 如果是空白final变量是实例常量，则需要在构造方法中初始化 如果是空白final变量是静态常量，则需要在静态代码块中初始化 final修饰类 final修饰的类不能被继承。有时出于设计安全的目的，不想让自己编写的类被别人继承，这时可以使用final关键字修饰父类。 final修饰方法 final修饰的方法不能被子类覆盖。有时也是出于设计安全的目的，父类中的方法不想被别人覆盖，这是可以使用final关键字修饰父类中方法。 抽象类和接口抽象类 抽象类概念 在Java中具有抽象方法的类称为“抽象类” Java语言提供了两种类：一种是具体类；另一种是抽象子类 抽象类不能被实例化,只有具体类才能被实例化 抽象类声明和是实现 在Java中抽象类和抽象方法的修饰符是abstract 抽象方法中只有方法的声明，没有方法的实现，即没有大括号（{}）部分 如果一个方法被声明为抽象的，那么这个类也必须声明为抽象的。而一个抽象类中，可以有0n个抽象方法，以及0n具体方法 设计抽象方法目的就是让子类来实现的，否则抽象方法就没有任何意义 接口 接口概念 接口中所有方法都是抽象的，而且接口可以有成员变量，在接口中成员变量都静态成员变量，即省略了public static final修饰符 接口与抽象类一样都不能被实例化 接口声明和实现 声明：在Java中接口的声明使用的关键字是interface 实现：某个类实现接口时，要在声明时使用implements关键字，当实现多个接口之间用逗号（,）分隔。实现接口时要实现接口中声明的所有方法。 接口与多继承 在C++语言中一个类可以继承多个父类，但这会有潜在的风险，如果两个父类有相同的方法，那么子类将继承哪一个父类方法呢？这就是C++多继承所导致的冲突问题。 在Java中只允许继承一个类，但可实现多个接口。通过实现多个接口方式满足多继承的设计需求。如果多个接口中即便有相同方法，它们也都是抽象的，子类实现它们不会有冲突。 接口继承 Java语言中允许接口和接口之间继承。由于接口中的方法都是抽象方法，所以继承之后也不需要做什么，因此接口之间的继承要比类之间的继承简单的多。 事实上在接口中覆盖方法，并没有实际意义，因为它们都是抽象的，都是留给子类实现的。 Java 8新特性默认方法和静态方法 在Java 8之前Java语言中接口存在如下不足之处： 不能可选实现方法，接口的方法全部是抽象的，实现接口时必须全部实现接口中方法，哪怕是有些方法并不需要，也必须实现。 没有静态方法。 针对这些问题，Java 8在接口中提供了声明默认方法和静态方法的能力 接口中的默认方法类似于类中具体方法，给出了具体实现，只是方法修饰符是default。接口中静态方法类似于类中静态方法。 实现接口时接口中原有的抽象方法在实现类中必须实现。默认方法可以根据需要有选择实现（覆盖）。静态方法不需要实现，实现类中不能拥有接口中的静态方法。 接口中声明的静态方法与其他实现类没有任何关系，只能通过接口名调用 抽象类与接口的区别 接口支持多继承，而抽象类（包括具体类）只能继承一个父类。 接口中不能有实例成员变量，接口所声明的成员变量全部是静态常量，即便是变量不加public static final修饰符也是静态常量。抽象类与普通类一样各种形式的成员变量都可以声明。 接口中没有包含构造方法，由于没有实例成员变量，也就不需要构造方法了。抽象类中可以有实例成员变量，也需要构造方法。 抽象类中可以声明抽象方法和具体方法。Java 8之前接口中只有抽象方法，而Java 8之后接口中也可以声明具体方法，具体方法通过声明默认方法实现。 枚举类枚举概念 Java 5之后提供了枚举类型，Java枚举类型本质上是一种继承java.lang.Enum类，是引用数据类型，因此也称为“枚举类”。 Java中枚举类型的作用已经不仅仅是定义一组常量提高程序的可读性了，还具有如下特性： Java枚举类型是一种类，是引用类型，具有了面向对象特性，可以添加方法和成员变量等。 Java枚举类型父类是java.lang.Enum，不需要显式声明。 Java枚举类型可以实现接口，与类实现接口类似。 Java枚举类型不能被继承，不存在子类。 枚举声明 Java中是使用enum关键词声明枚举类，具体定义放在一对大括号内，枚举的语法格式如下：[public] enum 枚举名 {枚举常量列表} “枚举常量列表”是枚举的核心，它由一组相关常量组成。 使用枚举类时，赋值过程中实例化枚举类对象，赋值表达式是“枚举类型名.枚举常量”的形式，并初始化为枚举常量 枚举类与switch语句能够很好地配合使用，case常量直接使用枚举常量，而且不需要枚举类名作为前缀，使用起来比较简洁 在switch中使用枚举类型时，switch语句中case分支语句个数应该对应枚举常量个数，不要多也不要少，当使用default时，default应该只表示等于最后一个枚举常量情况。 枚举类可以像类一样包含成员变量和成员方法，成员变量可以是实例变量也可以是静态变量，成员方法可以是实例方法，也可以是静态方法，但不能是抽象方法。 添加的其他成员的枚举类需要注意，“枚举常量列表”语句必须是枚举类中的第一行代码。而且“枚举常量列表”语句后面要加分号（;）表示语句的结束 枚举类构造方法 在类中成员变量的初始化是通过构造方法实的，而在枚举类中也是通过构造方法初始化成员变量的；注意枚举类的中的构造方法只能是私有访问级别，构造方法可以省略private关键字，但它仍然是私有的构造方法。这也说明了枚举类不允许在外部创建对象。 枚举常用方法 所有枚举类都继承java.lang.Enum类，Enum中定义了一些枚举中常用的方法： int ordinal()：返回枚举常量的顺序。这个顺序根据枚举常量声明的顺序而定，顺序从零开始。 枚举类型[] values()：静态方法，返回一个包含全部枚举常量的数组。 枚举类型 valueOf(String str)：静态方法，str是枚举常量对应的字符串，返回一个包含枚举类型实例。 在Java类引用类型进行比较时，有两种比较方法==和equals，==比较的是两个引用是否指向同一个对象，equals是比较对象内容是否相同。但是，枚举引用类型中==和equals都是一样的，都是比较两个引用是否指向同一个实例，枚举类中每个枚举常量无论何时都只有一个实例。 Java常用类Java根类-Object Object类属于java.lang包中的类型，不需要显示使用import语句引入，它是由解释器自动引入。 Object类有很多方法，常用的几个方法： String toString()：返回该对象的字符串表示。 boolean equals(Object obj)：指示其他某个对象是否与此对象“相等”。 toString()方法 为了日志输出等处理方便，所有的对象都可以以文本方式表示，需要在该对象所在类中覆盖toString()方法。如果没有覆盖toString()方法，默认的字符串是“类名@对象的十六进制哈希码 ”。 使用System.out.println等输出语句可以自动调用对象的toString()方法将对象转换为字符串输出 对象比较方法 ==运算符 ==运算符是比较两个引用变量是否指向同一个实例 equals()方法 equals()方法是比较两个对象的内容是否相等，通常字符串的比较，只是关心的内容是否相等。 equals()方法是继承自Object的，所有对象都可以通过equals()方法比较，问题的关键是需要指定相等的规则，就是要指定比较的是哪些属性相等，所以为了比较两个对象相等，则需要覆盖equals()方法，在该方法中指定比较规则。 包装类 范围 在Java中8种基本数据类型不属于类，不具备“对象”的特征，没有成员变量和方法，不方便进行面向对象的操作。为此，Java提供包装类（Wrapper Class）来将基本数据类型包装成类，每个Java基本数据类型在java.lang包中都有一个相应的包装类，每个包装类对象封装一个基本数据类型数值。除int和char类型外，其他的类型对应规则就是第一个字母大写 包装类都是final的，不能被继承。包装类都是不可变类，类似于String类，一旦创建了对象，其内容就不可以修改 类别 数值包装类(Byte、Short、Integer、Long、Float和Double) 相同点 构造方法类似–每一个数值包装类都有两个构造方法，以Integer为例，Integer构造方法如下： Integer(int value)：通过指定一个数值构造Integer对象。 Integer(String s)：通过指定一个字符串s构造对象，s是十进制字符串表示的数值。 共同的父类–这6个数值包装类有一个共同的父类——Number，Number是一个抽象类，除了这6个子类还有：AtomicInteger、AtomicLong、BigDecimal和BigInteger，Number是抽象类，要求它的子类必须实现如下6个方法 byte byteValue()：将当前包装的对象转换为byte类型的数值。 double doubleValue()：将当前包装的对象转换为double类型的数值。 float floatValue()：将当前包装的对象转换为float类型的数值。 int intValue()：将当前包装的对象转换为int类型的数值。 long longValue()：将当前包装的对象转换为long类型的数值。 short shortValue()：将当前包装的对象转换为short类型的数值。 compareTo()方法 每一个数值包装类都有int compareTo(数值包装类对象)方法，可以进行包装对象的比较。方法返回值是int，如果返回值是0，则相等；如果返回值小于0，则此对象小于参数对象；如果返回值大于0，则此对象大于参数对象。 字符串转换为基本数据类型–每一个数值包装类都提供一些静态parseXXX()方法将字符串转换为对应的基本数据类型，以Integer为例，方法定义如下： static int parseInt(String s)：将字符串s转换有符号的十进制整数。 static int parseInt(String s, int radix)：将字符串s转换有符号的整数，radix是指定基数，基数用来指定进制。注意这种指定基数的方法在浮点数包装类（Double和Float）中没有的。 基本数据类型转换为字符串–每一个数值包装类都提供一些静态toString()方法实现将基本数据类型数值转换为字符串，以Integer为例，方法定义如下： static String toString(int i)：将该整数i转换为有符号的十进制表示的字符串。 static String toString(int i, int radix)：将该整数i转换为有符号的特定进制表示的字符串，radix是基数可以指定进制。注意这种指定基数的方法在浮点数包装类（Double和Float）中没有的。 Character Character类是char类型的包装类。Character类常用方法如下： Character(char value)：构造方法，通过char值创建一个新的Character对象。 char charValue()：返回此Character对象的值。 int compareTo(Character anotherCharacter)：方法返回值是int，如果返回值是0，则相等；如果返回值小于0，则此对象小于参数对象；如果返回值大于0，则此对象大于参数对象。 Boolean 01.构造方法Boolean类是boolean类型的包装类。Boolean类有两个构造方法，构造方法定义如下： Boolean(boolean value)：通过一个boolean值创建Boolean对象。 Boolean(String s)：通过字符串创建Boolean对象。s不能为null，s如果是忽略大小写”true”则转换为true对象，其他字符串都转换为false对象。 compareTo()方法 Boolean类有int compareTo(Boolean包装类对象)方法，可以进行包装对象的比较。方法返回值是int，如果返回值是0，则相等；如果返回值小于0，则此对象小于参数对象；如果返回值大于0，则此对象大于参数对象。 字符串转换为boolean类型 Boolean包装类都提供静态parseBoolean()方法实现将字符串转换为对应的boolean类型，方法定义如下： static boolean parseBoolean(String s)：将字符串转换为对应的boolean类。s不能为null，s如果是忽略大小写”true”则转换为true，其他字符串都转换为false。 自动装箱/拆箱 拆箱(unboxing )：拆箱能够将包装类对象自动转换为基本数据类型的数值，而不需要使用intValue()或doubleValue()等方法 自动装箱( autoboxing )：装箱能够自动地将基本数据类型的数值自动转换为包装类对象，而不需要使用构造方法。 在自动装箱和拆箱时，要避免空对象，拆箱的过程本质上是调用intValue()方法实现的，试图访问空对象的方法和成员变量，就会抛出运行期NullPointerException异常。 Math类 舍入方法 static double ceil(double a)：返回大于或等于a最小整数。 static double floor(double a)：返回小于或等于a最大整数。 static int round(float a)：四舍五入方法。 最大值和最小值 static int min(int a, int b)：取两个int整数中较小的一个整数。 static int min(long a, long b)：取两个long整数中较小的一个整数。 static int min(float a, float b)：取两个float浮点数中较小的一个浮点数。 static int min(double a, double b)：取两个double浮点数中较小的一个浮点数。 max方法取两个数中较大的一个数，max方法与min方法参数类似也有4个版本 绝对值 static int abs(int a)：取int整数a的绝对值。 static long abs(long a)：取long整数a的绝对值。 static float abs(float a)：取float浮点数a的绝对值。 static double abs(double a)：取double浮点数a的绝对值。 三角函数 static double sin(double a)：返回角的三角正弦。 static double cos(double a)：返回角的三角余弦。 static double tan(double a)：返回角的三角正切。 static double asin(double a)：返回一个值的反正弦。 static double acos(double a)：返回一个值的反余弦。 static double atan(double a)：返回一个值的反正切。 static double toDegrees(double angrad)：将弧度转换为角度。 static double toRadians(double angdeg)：将角度转换为弧度。 对数运算 static double log(double a)，返回a的自然对数。 平方根 static double sqrt(double a)，返回a的正平方根。 幂运算 static double pow(double a, double b)，返回第一个参数的第二个参数次幂的值。 计算随机值 static double random()，返回大于等于 0.0 且小于 1.0随机数。 常量 圆周率PI 自然对数的底数E。 大数值 BigInteger java.math.BigInteger是不可变的任意精度的大整数。BigInteger构造方法有很多，其中字符串参数的构造方法有两个： BigInteger(String val)：将十进制字符串val转换为BigInteger对象。 BigInteger(String val, int radix)：按照指定基数radix将字符串val转换为BigInteger对象。 BigInteger提供多种方法，常用方法如下： int compareTo(BigInteger val)：将当前对象与参数val进行比较，方法返回值是int，如果返回值是0，则相等；如果返回值小于0，则此对象小于参数对象；如果返回值大于0，则此对象大于参数对象。 BigInteger add(BigInteger val)：加运算，当前对象数值加参数val。 BigInteger subtract(BigInteger val)：减运算，当前对象数值减参数val。 BigInteger multiply(BigInteger val)：乘运算，当前对象数值乘参数val。 BigInteger divide(BigInteger val)：除运算，当前对象数值除以参数val。 BigInteger继承了抽象类Number，那么它还有实现抽象类Number的6个方法 BigDecimal java.math.BigDecimal是不可变的任意精度的有符号十进制数，BigDecimal构造方法有很多： BigDecimal(BigInteger val)：将BigInteger对象val转换为BigDecimal对象。 BigDecimal(double val)：将double转换为BigDecimal对象，参数val是double类型的二进制浮点值准确的十进制表示形式。 BigDecimal(int val)：将int转换为BigDecimal对象。 BigDecimal(long val)：将long转换为BigDecimal对象。 BigDecimal(String val)：将字符串表示数值形式转换为BigDecimal对象。 BigDecimal提供多种方法，常用的方法如下： int compareTo(BigDecimal val)：将当前对象与参数val进行比较，方法返回值是int，如果返回值是0，则相等；如果返回值小于0，则此对象小于参数对象；如果返回值大于0，则此对象大于参数对象。 BigDecimal add(BigDecimal val)：加运算，当前对象数值加参数val。 BigDecimal subtract(BigDecimal val)：减运算，当前对象数值减参数val。 BigDecimal multiply(BigDecimal val)：乘运算，当前对象数值乘参数val。 BigDecimal divide(BigDecimal val)：除运算，当前对象数值除以参数val。 BigDecimal divide(BigDecimal val, int roundingMode)：除运算，当前对象数值除以参数val。roundingMode要应用的舍入模式。 BigDecimal继承了抽象类Number，那么它还实现抽象类Number的6个方法 日期时间相关类 Java8之前日期相关类 Date类 在Java SE核心类中有两个Date，分别是java.util.Date和java.sql.Date。java.util.Date就是日期时间类，而java.sql.Date是JDBC中日期字段类型。 Java 8之前与日期时间相关类还有DateFormat、Calendar和TimeZone，DateFormat用于日期格式化，Calendar日历类，TimeZone是时区类。 构造方法 Date()：用当前时间创建Date对象，精确到毫秒。 Date(long date)：指定标准基准时间以来的毫秒数创建Date对象。标准基准时间是格林威治时间1970年1月1日00:00:00。 普通方法 boolean after(Date when)：测试此日期是否在when日期之后。 boolean before(Date when)：测试此日期是否在when日期之前。 int compareTo(Date anotherDate)：比较两个日期的顺序。如果参数日期等于此日期，则返回值0；如果此日期在参数日期之前，则返回小于0的值；如果此日期在参数日期之后，则返回大于0的值。 long getTime()：返回自1970年1月1日00:00:00以来此Date对象表示的毫秒数。 void setTime(long time)：用毫秒数time设置日期对象，time是自1970年1月1日00:00:00以来此Date对象表示的毫秒数。 日期格式化和解析 日期格式化类是java.text.DateFormat，DateFormat是抽象类，它的常用具体类是java.text.SimpleDateFormat。 DateFormat中提供日期格式化和日期解析方法，具体方法说明如下： String format(Date date)：将一个Date格式化为日期/时间字符串。 Date parse(String source)：从给定字符串的开始解析文本，以生成一个日期对象。如果解析失败则抛出ParseException。 具体类是SimpleDateFormat构造方法如下： SimpleDateFormat()：用默认的模式和默认语言环境的日期格式符号构造SimpleDateFormat。 SimpleDateFormat(String pattern)：用给定的模式和默认语言环境的日期格式符号构造SimpleDateFormat。pattern参数是日期和时间格式模式 Calendar类 对日期时间进行操作，可以使用java.util.Calendar类，Calendar是一个抽象类，不能实例化，但是通过静态工厂方法getInstance()获得Calendar实例 主要方法 static Calendar getInstance()：使用默认时区和语言环境获得一个日历。 void set(int field, int value)：将给定的日历字段设置为给定值。 void set(int year,int month,int date)：设置日历字段YEAR、MONTH和DAY_OF_MONTH的值 Date getTime()：返回一个表示此Calendar时间值（从1970年1月1日00:00:00至现在的毫秒数）的Date对象。 boolean after(Object when)：判断此Calendar表示的时间是否在指定时间之后，返回判断结果。 boolean before(Object when)：判断此Calendar表示的时间是否在指定时间之前，返回判断结果。 int compareTo(Calendar anotherCalendar)：比较两个Calendar对象表示的时间值。 Java8新日期时间相关类 时间和日期 Java 8之后提供了新的日期时间类有三个：LocalDate、LocalTime和LocalDateTime，它们都位于java.time包中，LocalDate表示一个不可变的日期对象；LocalTime表示一个不可变的时间对象；LocalDateTime表示一个不可变的日期和时间。 这三个类有类似的方法，这三个类并没有提供公有的构造方法，创建它们对象可以使用静态工厂方法，主要有now()和of()方法。 now()方法说明如下： static LocalDate now()：LocalDate静态工厂方法，该方法使用默认时区获得当前日期，返回LocalDate对象。 static LocalTime now()：LocalTime静态工厂方法，该方法使用默认时区获得当前时间，返回LocalTime对象。 static LocalDateTime now()：LocalDateTime静态工厂方法，该方法使用默认时区获得当前日期时间，返回LocalDateTime对象。 of()方法有很多重载方法，说明如下： static LocalDateTime of(int year, int month, int dayOfMonth, int hour, int minute, int second)：按照指定的年、月、日、小时、分钟和秒获得LocalDateTime实例，将纳秒设置为零。 static LocalTime of(int hour, int minute, int second)：按照指定的小时、分钟和秒获取一个LocalTime实例。 static LocalDate of(int year, int month, int dayOfMonth)：按照指定的年、月和日获得一个LocalDate实例，日期中年、月和日必须有效，否则将抛出异常。 日期格式化和解析 日期格式化 日期格式化方法是format，这三个类每一个都有String format(DateTimeFormatter formatter)，参数formatter是DateTimeFormatter类型。 日期解析 日期解析方法是parse，这三个类每一个都有两个版本的parse方法 static LocalDateTime parse(CharSequence text)：使用默认格式，从一个文本字符串获取一个LocalDateTime实例，如2007-12-03T10:15:30。 static LocalDateTime parse(CharSequence text, DateTimeFormatter formatter)：使用指定格式化，从文本字符串获取LocalDateTime实例。 static LocalDate parse(CharSequence text)：使用默认格式，从一个文本字符串获取一个LocalDate实例，如2007-12-03。 static LocalDate parse(CharSequence text, DateTimeFormatter formatter)：使用指定格式化，从文本字符串获取LocalDate实例。 static LocalTime parse(CharSequence text)：使用默认格式，从一个文本字符串获取一个LocalTime实例。 static LocalTime parse(CharSequence text, DateTimeFormatter formatter)：使用指定的格式化，从文本字符串获取LocalTime实例。 内部类 内部类概述 Java语言中允许在一个类（或方法、代码块）的内部定义另一个类，后者称为“内部类”（InnerClasses），也称为“嵌套类”（Nested Classes），封装它的类称为“外部类”。内部类与外部类之间存在逻辑上的隶属关系，内部类一般只用在封装它的外部类或代码块中使用。 内部类的作用 封装。将不想公开的实现细节封装到一个内部类中，内部类可以声明为私有的，只能在所在外部类中访问。 提供命名空间。静态内部类和外部类能够提供有别于包的命名空间。 便于访问外部类成员。内部类能够很方便访问所在外部类的成员，包括私有成员也能访问。 分类 有名内部类 局部内部类 成员内部类 实例内部类 静态内部类 匿名内部类 成员内部类 成员内部类类似于外部类的成员变量，在外边类的内部，且方法体和代码块之外定义的内部类。 实例内部类 实例内部类与实例变量类似，可以声明为公有级别、私有级别、默认级别或保护级别，即4种访问级别都可以，而外部类只能声明为公有或默认级别。 在内部类中this是引用当前内部类对象，而要引用外部类对象需要使用“外部类名.this”，如果内部类和外部类它们的成员命名没有冲突情况下，在引用外部类成员时可以不用加“外部类名.this” 静态内部类 静态内部类与静态变量类似，在声明的时候使用关键字static修饰，静态内部类只能访问外部类静态成员，所以静态内部类使用的场景不多。但可以提供有别于包的命名空间。 在声明静态内部时采用“内部类.静态内部类”形式，实例化也是如此形式。 局部内部类 局部内部类就是在方法体或代码块中定义的内部类，局部内部类的作用域仅限于方法体或代码块中。局部内部类访问级别只能是默认的，不能是公有的、私有的和保护的访问级别，即不能使用public、private和protected修饰。局部内部类也不能是静态，即不能使用static修饰。局部内部类可以访问外部类所有成员。 实例化内部类后马上调用它的方法，没有为内部类对象分配一个引用变量名，这种写法称为“匿名对象”。匿名对象适合只运行一次情况下。 匿名内部类 匿名内部类是没有名字的内部类，本质上是没有名的局部内部类，具有局部内部类所有特征。例如：可以访问外部类所有成员。如果匿名内部类在方法中定义，它所访问的参数需要声明为final的。 匿名内部类通常用来实现接口或抽象类的，很少覆盖具体类","categories":[{"name":"Java","slug":"Java","permalink":"https://zql-gl.github.io/categories/Java/"}],"tags":[{"name":"知识文档","slug":"知识文档","permalink":"https://zql-gl.github.io/tags/%E7%9F%A5%E8%AF%86%E6%96%87%E6%A1%A3/"}]},{"title":"","slug":"Linux常用命令","date":"2022-10-22T07:11:03.999Z","updated":"2022-10-22T07:11:37.528Z","comments":true,"path":"posts/0.html","link":"","permalink":"https://zql-gl.github.io/posts/0.html","excerpt":"","text":"Linux常用命令常用快捷键上下键 选择之前执行过的历史命令，history指令可以查看历史指令列表 Tab键 自动补全准备输入的命令或文件名，如果按一下没有补全，就按两下，会列出所有可能的结果 CTRL+c 结束正在执行的命令。（如果还结束不了，关闭终端窗口） clear或者CTRL+L 清除屏幕中的内容 终端命令终端命令行与ls命令 ifconfig命令 查看本机的IP地址 [root@localhost ~]# root：当前登录的用户 @localhost:当前登录的系统名 ~：当前所在目录 ~代表当前用户的主目录 #:代表管理员权限 $:代表普通用户权限 ls命令:列出目录中的文件和文件夹 ls -l 等价于 ll 列出当前目录中的文件列表的详细信息（不显示隐藏文件） ls -a 列出当前目录中的所有文件，包括隐藏文件(隐藏文件或文件夹名字以 . 开头) ls -A 显示所有的文件和目录，包括隐藏文件和目录，但是不显示“.”和”..”目录 ls -t 根据时间排序 ls /etc 列出/etc目录下的文件信息 ls -al 等价于 ls -a -l 可以将单字母的选项一起写，两个功能都能实现 在线帮助命令 man命令 例如： man ls help命令 查看外部命令的帮助文档，格式为“命令 –help”，如：passwd –help 查看内部命令的帮助文档，格式为“help 命令”，如：help ls type命令 判断命令到底为内部命令还是外部命令 内部命令返回如： help is a shell builtin 外部命令返回如: passwd is/usr/bin/passwd 其他方式 使用搜索引擎查找 whereis命令 用于查找与某一命令相关的文件的存放位置 whereis -b ：只查找二进制文件 whereis -m： 只查找手册页，说明文件 whereis -s：查找源程序文件 文件和目录操作命令 目录 根目录：/ /etc:保存系统数据文件、启动文件和脚本等 /bin:存放普通用户常用的命令 /sbin:存放系统管理方面的常用命令 /boot:存放系统核心文件 /dev:存放与设备有关的文件 /lib:存放在编译某些程序时要用的函数库 /usr:存放用户安装的应用程序，类似于Windows系统中的program files目录 /var:存放系统数据文件 /root:系统管理员（root用户）的属主目录 /home:存放普通用户属主目录的目录 /media:在系统自动挂载存储设备时（如光驱、U盘）使用的目录 . :表示当前目录 .. :表示当前目录的上一层目录 ~ ：表示当前用户的属主目录 vi编辑器 一般模式 数字0 ：光标移动到本行行首 $ :光标移动到本行行尾 G：光标移动到文本的最末行 gg：光标移动到该文本的首行 dd：删除光标所在的那一行 ndd(n为数字)：删除光标所在位置向下的n 行 x、X：x表示向后删除一个字符，X 表示向前删除一个字符 编辑模式 i:在当前字符前插入字符 a:在当前字符后插入字符 o:在当前行下插入新的一行 O：在当前行上插入新的一行 r:替换光标所在的字符，只替换一次 命令行模式 :w 将编辑过的文本保存 :q 退出vim :wq 保存文本 ，并退出 :q! 不管编辑或不编辑文本都不保存并退出 文件与目录操作命令 cd命令 cd 相对路径或绝对路径 cd .. 返回上一级目录 cd ~ 回到自己的属主目录 pwd命令 用于显示当前所在的目录 mkdir命令 mkdir 目录名称 用于创建目录 mkdir 目录名称 目录名称 用于创建多个目录 rmdir命令 rmdir 目录名称 用于删除目录，删除文件夹时，文件夹必须是空的 cp命令 用于复制文件，对文件的重命名 rm命令 用于删除文件 rm -f 强制删除，不提示用户是否需要删除的信息 rm -r 循环删除，常用于删除目录 mv命令 用于移动文件或目录，对文件或目录的重命名操作 管道命令 （|）将|左边命令的输出结果作为|右边命令的输入数据 创建目录或文件 mkdir命令 mkdir 目录名称 用于创建目录 mkdir 目录名称 目录名称 用于创建多个目录 touch命令 创建一个或多个空文件 touch 文件路径文件名 cat &gt; 如果原来有内容就覆盖原内容 cat &gt;&gt; 追加内容 vi编辑器 vi 文件名称 查看文件内容命令 cat命令 cat -n ：连行号一起显示在屏幕上 cat -b：连行号一起显示在屏幕上，但空行不算 cat -v：显示控制符号 more命令 用于在屏幕上显示文件内容 用于分页显示文件列表 more +n:从第n行开始显示 more -n:定义屏幕大小为n行，就是每页显示n行 退出按Q键 less命令 查看文件内容 less -N：显示每行行号 退出按Q键 head命令 查看文件的前几行，默认显示10行 head -n :表示指定显示多少行 tail命令 显示文件的后几行，默认显示10行 tail -n :表示指定显示多少行 文件与目录权限 chown命令 用于变更文件及目录的所有者和所属组 chown -R :表示连同目录下所有文件及子目录都进行变更 chmod命令 修改文件或目录的读写执行权限 chmod -R :表示连同目录下所有文件及子目录都进行变更 搜索文件或目录 grep命令 只显示文件中符合指定条件的行 grep 需要查找的内容 查找的文件名 grep -i 需要查找的内容 查找的文件名 查找内容的行，忽略大小写 grep -n 需要查找的内容 查找的文件名 查找并显示行号 which命令 用于查找可执行文件的位置 在当前用户的环境变量PATH路径中寻找指令文件 whereis命令 用于根据设定好的目录查找文件 查找指令文件，帮助文档及源代码等内容 find命令 用于对指定目录及其所有子目录进行文件搜索 用find命令查找数据比较消耗硬盘空间（find命令直接查找硬盘数据） locate命令 查找文件，根据文件列表的数据库查找，速度快，但更新不及时， updatedb 更新文件列表数据库 文件打包与压缩 gzip命令 gzip 文件名 压缩文件为 文件名.gz gzip -d 文件名.gz 解压文件 zip命令 zip 文件名.zip 文件名 文件名 可以压缩一个或多个文件 unzip 文件名.zip 解压缩 unzip 文件名.zip -d 目录路径 解压到指定目录 tar命令 文件打包与解包 tar -cvf 文件名.tar 文件名 打包不压缩 tar -zcvf 文件名.tar.gz 文件名 打包压缩 tar -xvf 文件名.tar 解包到当前文件夹 tar -zxvf 文件名.tar.gz 解压到当前文件夹 tar -zxvf 文件名.tar.gz -C 目录路径 解压到指定目录 文件类型 链接文件 ln -选项 源文件 链接文件 ln命令：新建链接文件 ln -d 创建硬链接，默认为该参数 ln -s 创建符号链接 ln -f 在创建链接时，如果目标文件已经存在，则对其进行替换 ls -il:查看索引节点号 硬盘光盘 df命令 df -hT 查看硬盘使用情况 du命令 du -sh /home 只查看home目录容量使用情况 mount命令 mount /dev/sr0 /media 将光盘挂载到 /media 文件夹 umount /dev/sr0 取消挂载 Linux系统的管理关机和重启 shutdown -t 数字 指定多少秒后关机 shutdown -r 时间 指定时间关机后立即重新开机 shutdown -r now 现在就重启计算机 shutdown -h 时间 指定时间关机 shutdown -h now 立即关机 poweroff 也是立即关机（不能设置关机时间） halt -p 表示挂起系统后关闭系统，相当于 shutdown -h 是最简单的关机命令 shutdown -c 取消关机进程 reboot 用于重启计算机 相当于 shutdown -r now 用户和组管理 groupadd命令 新建群组 groupdel命令 删除已存在的群组 useradd命令 新建用户 useradd 用户名 userdel命令 删除用户 userdel -r 用户名 删除用户及其主目录中的所有文件 usermod命令 修改用户信息 passwd命令 为用户设定密码 su命令 切换用户 su - 用户名 切换为什么用户 sudo命令 以管理员权限执行指令 id命令 用于显示用户的UID、GID及所拥有的群组 groups命令 用于显示用户所属的群组信息 磁盘管理 查看磁盘空间 df命令 用于显示磁盘空间的使用情况 du命令 用于显示指定目录下所有文件及子目录所占用的磁盘空间大小 磁盘分割 fdisk命令 用于显示或进行分区 设备挂载 mount命令 用于挂载存储设备 umount命令 用于卸载已经挂载的设备 安装包管理 rpm命令 rpm -ivh rpm包名：用于Linux系统下的软件套件安装 rpm -e 套件名：卸载指定套件 rpm -e –nodeps 套件名：强制卸载，不考虑套件之间的依赖性 yum命令 yum install 包名：安装指定的包 yum erase 包名：卸载指定的包 yum remove 包名：删除已安装的包 源码包 使用源码安装 进程管理 后台工作管理 &amp;命令 将当前工作放到后台运行 Ctrl+Z组合键 暂停某工作 fg命令 将后台的工作放到前台来执行 jobs命令 用于查询所有后台的任务 系统状态监控 ps命令 用于显示当前系统中运行的进程 ps aux :列出目前所有内存当中的程序 ps -ef：列出系统中的所有进程 w命令 用于 查看当前系统负载 vmstat命令 用于监控当前系统状态 top命令 用于动态监控进程所占系统资源，每隔3秒更新一次 free命令 用于查看内存使用情况 kill命令 用于停止进程 网络管理 ifconfig命令 用于显示或设置网卡 netstat命令 用于显示网络连接情况 netstat -Inp:用于显示当前系统启用哪些端口 netstat -an：用于显示网络连接情况 ping命令 用于测试目标与本机的连接情况 服务脚本和安全设置 service命令 用于执行/etc/init.d目录下的服务脚本 service network restart：重启网络服务 start ：启动服务 stop：结束服务 restart ：重启服务 status ：显示服务状态 setenforce命令 用于设置SELinux的状态 setenforce 0：用来关闭SELinux setenforce 1：用来开启SELinux getenforce命令 用于显示当前SELinux的状态 防火墙iptables service iptables start：开启防火墙 service iptables stop：关闭防火墙 Web服务器环境的搭建安装LAMP 登陆Linux系统 使用root用户登陆 关闭防火墙 setenforce 0 安装Apache yum install httpd：安装httpd systemctl start httpd.service：启动Apache服务 安装MySQL 安装PHP 重启服务 安装Tomcat 查看CentOS 是否自带了JDK，如果没有需要先安装JDK 复制Tomcat安装包到root用户的属主目录下 解压安装包 查看Tomcat的默认端口 8080 启动Tomcat 获取Linux系统的IP地址，在物理机浏览器中输入“http://Linux系统的IP地址:8080”来打开 shell编程BASH是centos默认使用的shell 记录历史命令！ ！！：表示执行上一条指令 ！n(n是数字)：表示执行历史命令中第n条指令 ! 字符串：表示执行历史命令中最近一次以“字符串”为开头的指令 指令和文件名补全 tab键 别名alias 通配符 ：匹配零个或多个字符 ？:匹配一个字符 输入/输出重定向 &lt;：输入重定向 ：输出重定向 ：追加重定向 管道符 |:将前面命令的运行结果作为后面命令的输入条件 作业控制 Ctrl+Z：暂停进程 fg：恢复进程 bg：使进程在后台运行 Ctrl+C：终止进程 shell中的编码规范 echo命令 用于向窗口输出文本、字符串 shell注释 以#开头的行，只有单行注释 变量 局部变量 环境变量 shell变量 数据类型 字符创 shell数组 shell基本运算符 算术运算符 关系运算符 布尔运算符 字符串运算符 shell流程控制 if条件控制 for循环控制 while循环控制 until循环 case语句","categories":[],"tags":[]},{"title":"Java基础知识","slug":"02.Java基础知识","date":"2022-10-20T15:00:00.000Z","updated":"2022-10-22T06:35:39.936Z","comments":true,"path":"posts/2.html","link":"","permalink":"https://zql-gl.github.io/posts/2.html","excerpt":"","text":"Java基础知识Java语法基础标识符 标识符就是变量、常量、方法、枚举、类、接口等由程序员指定的名字。构成标识符的字母均有一定的规范，Java语言中标识符的命名规则如下 01.区分大小写：Myname与myname是两个不同的标识符。 首字符，可以是下划线（_）或美元符或字母，但不能是数字。 除首字符外其他字符，可以是下划线（_）、美元符、字母和数字。 关键字不能作为标识符。 Java关键字 访问控制 private 私有的 public 公共的 default 默认 protected 受保护的 类、方法和变量修饰符 abstract 声明抽象 class 类 extends 扩充,继承 final 最终值,不可改变的 implements 实现（接口） interface 接口 native 本地，原生方法（非 Java 实现） new 新,创建 static 静态 strictfp 严格,精准 synchronized 线程,同步 transient 短暂 volatile 易失 程序控制语句 break 跳出循环 case 定义一个值以供 switch 选择 continue 继续 do 运行 else 否则 for 循环 if 如果 instanceof 实例 return 返回 switch 根据值选择执行 while 循环 错误处理 assert 断言表达式是否为真 catch 捕捉异常 finally 有没有异常都执行 throw 抛出一个异常对象 throws 声明一个异常可能被抛出 try 捕获异常 包相关 import 引入 package 包 基本类型 boolean 布尔型 char 字符型 double 双精度浮点 byte 字节型 float 单精度浮点 int 整型 short 短整型 long 长整型 变量引用 super 父类，超类 void 无返回值 this 本类 保留关键字 goto 是关键字，但不能使用 const 是关键字，但不能使用 分隔符 在Java源代码中，有一些字符被用作分隔，称为分隔符。分隔符主要有：分号（;）、左右大括号（{}）和空白。 Java的常量与变量 Java常量 常量在声明的同时需要赋予一个初始值，声明格式：final 数据类型 变量名 = 初始值; 使用final关键字来修饰常量，声明方式和变量类似，通常用大写字母表示常量 字符串常量包含在两个引号之间的字符序列，和字符变量都可以包含任何Unicode字符 定义变量的时候，如果加上final修饰符，这个变量就变成了常量 Java 的 null 不是关键字，类似于 true 和 false，它是一个字面常量，不允许作为标识符使用 分类 静态常量 在final 之前使用public static修饰，用来替代保留字const。 public static修饰的常量作用域是全局的，不需要创建对象就可以访问它，在类外部访问形式：HelloWorld. PI （类名.常量名） 成员常量 局部常量 Java变量 类变量（静态变量）：独立于方法之外的变量，用 static 修饰。 类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。 无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。 静态变量除了被声明为常量外很少使用，静态变量是指声明为 public/private，final 和 static 类型的变量。静态变量初始化后不可改变。 静态变量储存在静态存储区。经常被声明为常量，很少单独使用 static 声明变量。 静态变量在第一次被访问时创建，在程序结束时销毁。 与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为 public 类型。 默认值和实例变量相似。数值型变量默认值是 0，布尔型默认值是 false，引用类型默认值是 null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。 静态变量可以通过：ClassName.VariableName的方式访问。 类变量被声明为 public static final 类型时，类变量名称一般建议使用大写字母。如果静态变量不是 public 和 final 类型，其命名方式与实例变量以及局部变量的命名方式一致。 实例（成员）变量：独立于方法之外的变量，不过没有 static 修饰。成员变量是在类体中，而在方法之外，作用域是整个类，如果没有赋初始值，系统使用默认值 成员变量声明在一个类中，但在方法、构造方法和语句块之外； 当一个对象被实例化之后，每个实例变量的值就跟着确定； 成员变量在对象创建的时候创建，在对象被销毁的时候销毁； 成员变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息； 实例变量可以声明在使用前或者使用后； 访问修饰符可以修饰实例变量； 实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见； 实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定； 实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObjectReference.VariableName。 局部变量：是在方法或if、for和while等代码块中声明的变量。 局部变量声明在方法、构造方法或者语句块中； 局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁； 访问修饰符不能用于局部变量； 局部变量只在声明它的方法、构造方法或者语句块中可见； 局部变量是在栈上分配的。 局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。 Java编码规范命名规范（驼峰命名） 小驼峰命名 小驼峰法就是第一个单词是全部小写，后面的单词首字母大写 大驼峰命名 大驼峰法是第一个单词的首字母也大写 除了包和常量外，Java编码规范命名方法采用驼峰法 包名：包名是全小写字母，中间可以由点分隔开。作为命名空间，包名应该具有唯一性 常量名：全大写，如果是由多个单词构成，可以用下划线隔开如YEAR和WEEK_OF_MONTH。 类和接口名：采用大驼峰法 文件名：采用大驼峰法 变量：采用小驼峰法 方法名：采用小驼峰法 注释规范 文档注释：/** */ 文档注释就是指这种注释内容能够生成API帮助文档，JDK中javadoc命令能够提取这些注释信息并生成HTML文件。文档注释主要对类（或接口）、实例变量、静态变量、实例方法和静态方法等进行注释。 生成文档后，会生成很多HTML文件，其中的index.html文件是文档的入口 多行注释 /* */ 单行注释 // 代码排版 空行用以将逻辑相关的代码段分隔开，以提高可读性，空行使用规范： 类声明和接口声明之间保留两个空行 两个方法之间保留一个空行 方法的第一条语句之前保留一个空行 代码注释（尾端注释外）之前保留一个空行 一个方法内的两个逻辑段之间 代码中的有些位置是需要有空格的，空格的规范： 赋值符号“=”前后各有一个空格 所有的二元运算符都应该使用空格与操作数分开 一元操作符：负号“-”、自增“++”和自减“–”等，它们与操作数之间没有空格 小左括号“(”之后，小右括号“)”之前不应有空格 大左括号“{”之前有一个空格 方法参数列表小左括号“(”之前没有空格，小右括号“)”之后有一个空格，参数列表中参数逗号“,”之后也有一个空格。 关键字之后紧跟着小左括号“(”，关键字之后应该有一个空格 缩进的规范 在方法、Lambda、控制语句等包含大括号“{}”的代码块中，代码块的内容相对于首行缩进一个级别（4个空格） 如果是if语句中条件表达式的断行，那么新的一行应该相对于上一行缩进两个级别（8个空格），再往后的断行要与第一次的断行对齐 一行代码的长度应尽量不要超过80个字符，如果超过则需断行，断行的规范 在一个逗号后面断开。 在一个操作符前面断开，要选择较高级别的运算符（而非较低级别的运算符）断开。 新的一行应该相对于上一行缩进两个级别（8个空格）。 其他规范 在声明变量或常量时推荐一行一个声明 左大括号“{”位于声明语句同行的末尾。右大括号“}”另起一行，与相应的声明语句对齐，除非是一个空语句，右大括号“}”应紧跟在左大括号“{”之后 每行至多包含一条语句 虽然Java语言允许if、for等控制语句只有一行代码情况下，省略左右两个大括号，但是编码规范并不推荐这样使用 数据类型基本数据类型 数值类型 整数类型（默认int） byte：8位，默认是0 short：2个字节，默认是0 int：4个字节，默认是0 long：8个字节，默认是0L 浮点数类型（默认double） float：4个字节，默认是0.0f double：8个字节,默认是0.0d 字符类型 char:2个字节，范围\\u0000(0)~\\uffff(65535),默认值是’u0000’ 字符常量必须用单引号括起来的单个字符 布尔类型 boolean：true or false,默认是false 转义字符 \\n:换行（0x0a） \\r：回车（0x0d） \\t 制表符 \\f：换页符（0x0c） \\b 退格 (0x08) \\0 空字符 (0x0) \\s 空格 (0x20) \" 双引号 ' 单引号 \\ 反斜杠 \\ddd 八进制字符 (ddd) \\uxxxx 16进制Unicode字符 (xxxx) 数据类型转换 自动类型转换 整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。转换从低级到高级：byte,short,char—&gt; int —&gt; long—&gt; float —&gt; double 规则：1. 不能对boolean类型进行类型转换。 不能把对象类型转换成不相关类的对象。 在把容量大的类型转换为容量小的类型时必须使用强制类型转换。 转换过程中可能导致溢出或损失精度 浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入 强制类型转换 条件是转换的数据类型必须是兼容的。 格式：(type)value type是要强制类型转换后的数据类型 隐含强制类型转换 1、 整数的默认类型是 int。 小数默认是 double 类型浮点型，在定义 float 类型时必须在数字后面跟上 F 或者 f。 数字表示方式 进制数字表示方式 二进制数：以 0b 或0B为前缀，注意0是阿拉伯数字，不要误认为是英文字母o。 八进制数：以0为前缀，注意0是阿拉伯数字。 十六进制数：以 0x 或0X为前缀，注意0是阿拉伯数字 指数表示 如果采用十进制表示指数，需要使用大写或小写的e表示幂，e2表示10的2次方。 引用数据类型（String） 引用数据类型变量中保持的是指向对象的内存地址（引用数据类型在使用之前一定要：声明和初始化）默认值是null 类 接口 数组 元素数据类型[] 数组变量名; 推荐使用这种声明方式 运算符算术运算符 一元运算 -（取反）、++（自增）、–（自减） 前缀自增自减法(++a,–a): 先进行自增或者自减运算，再进行表达式运算。 后缀自增自减法(a++,a–): 先进行表达式运算，再进行自增或者自减运算 二元运算 +、-、*、/、% 位运算符 &amp;（位与）、|（位或）、~（位反）、^(位异或)、&lt;&lt;（左移）、&gt;&gt;（有符号右移）、&gt;&gt;&gt;（无符号右移）、&amp;=（位与等于）、|=（位或等于）、^=（位异或等于）、&lt;&lt;=（左移等于）、&gt;&gt;=（右移等于）、&gt;&gt;&gt;=（右移等于） 关系运算符 ==、!=、&gt;、&lt;、&gt;=、&lt;= 逻辑运算符 !（逻辑非）、&amp;（逻辑与）、|（逻辑或）、&amp;&amp;（短路与）、||（短路或） 赋值运算符 算术赋值运算符 +=、-=、*=、/=、%= 其他运算符 三元运算符 (?:) variable x = (expression) ? value if true : value if false 三元运算符（? :）。例如x?y:z;，其中x、y和z都为表达式。 instanceof 运算符 该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型） instanceof运算符使用格式:( Object reference variable ) instanceof (class/interface type) 小括号。起到改变表达式运算顺序的作用，它的优先级最高。 中括号。数组下标。 引用号（.）。对象调用实例变量或实例方法的操作符，也是类调用静态变量或静态方法的操作符。 赋值号（=）。赋值是用等号运算符（=）进行的。 new。对象内存分配运算符。 箭头（-&gt;）。Java 8新增加的，用来声明Lambda表达式。 双冒号（::）。Java 8新增加的，用于Lambda表达式中方法的引用。 控制语句分支（条件）语句 if语句 if语句 if(布尔表达式){//如果布尔表达式为true将执行的语句} 如果布尔表达式的值为 true，则执行 if 语句中的代码块，否则执行 if 语句块后面的代码。 if…else语句 if(布尔表达式){//如果布尔表达式的值为true}else{//如果布尔表达式的值为false} if 语句后面可以跟 else 语句，当 if 语句的布尔表达式值为 false 时，else 语句块会被执行。 if…else if…else 语句 if(布尔表达式 1){//如果布尔表达式 1的值为true执行代码}else if(布尔表达式 2){//如果布尔表达式 2的值为true执行代码}else if(布尔表达式 3){//如果布尔表达式 3的值为true执行代码}else {//如果以上布尔表达式都不为true执行代码} if 语句至多有 1 个 else 语句，else 语句在所有的 else if 语句之后。 if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。 一旦其中一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行。 switch case 语句 switch(expression){case value1: //语句 break; //可选case value2: //语句 break; //可选//你可以有任意数量的case语句default : //可选 //语句} 规则 switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。 switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。 case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。 当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。 当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。 switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。 switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。 循环语句 while 循环 while( 布尔表达式 ) { //循环内容} 只要布尔表达式为 true，循环就会一直执行下去 如果循环体中需要循环变量，就必须在while语句之前对循环变量进行初始化 do…while 循环 do { //代码语句}while(布尔表达式); 对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。 布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。 for 循环 for(初始化; 布尔表达式; 更新) {//代码语句} 最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。 然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。 执行一次循环后，更新循环控制变量。 再次检测布尔表达式。循环执行上面的过程。 Java 增强 for 循环–for-each语句 Java5 引入了一种主要用于数组的增强型 for 循环。遍历集合使用for-each比较方便 for(声明语句 : 表达式){//代码句子} 声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。 表达式：表达式是要访问的数组名，或者是返回值为数组的方法。 跳转语句 break语句 break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。 break 跳出最里层的循环，并且继续执行该循环下面的语句。 break还可以配合标签使用，多层循环的时候想要跳出外循环，可以为外循环添加一个标签，注意在定义标签的时候后面跟一个冒号，程序会跳转出标签所指定的循环 continue语句 continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。 在 for 循环中，continue 语句使程序立即跳转到更新语句。 在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。 默认情况下，continue只会跳出最近的内循环，可以为外循环添加一个标签，continue语句后面指定这个标签，这样当条件满足执行continue语句时，程序就会跳转出外循环。 return语句 throw语句 数组一维数组 声明语法：元素数据类型[] 数组变量名; 数组初始化 静态初始化 将数组的元素放到大括号中，元素之间用逗号（,）分隔 动态初始化 动态初始化使用new运算符分配指定长度的内存空间， 语法： new 元素数据类型[数组长度] ; 二维数组 声明语法：元素数据类型[][] 数组变量名; 二维数组初始化 静态初始化 int intArray[][] = { { 1, 2, 3 }, { 11, 12, 13 }, { 21, 22, 23 }, { 31, 32, 33 } }; 动态初始化 new 元素数据类型[高维数组长度] [低维数组长度] ; 不规则数组 高维数组元素个数确定，但是低维数组元素个数不同 动态初始化不规则数组比较麻烦，初始化4×3二维数组，不能使用new int[4][3]语句，而是先初始化高维数组，然后再分别逐个初始化低维数组 int intArray[][] = new int[4][]; //先初始化高维数组为4//逐一初始化低维数组intArray[0] = new int[2];intArray[1] = new int[1];intArray[2] = new int[3];intArray[3] = new int[3]; 字符串字符串类 含义 Java中的字符串是由双引号括起来的多个字符，Java中的字符采用Unicode编码 “” 空字符串不是null，空字符串是有分配内存空间的，而null是没有分配内存空间的。 获得字符串长度方法是length() String（不可变字符串），属于java.lang包，创建String对象可以通过构造方法实现，常用的构造方法 String()：使用空字符串创建并初始化一个新的String对象。 String(String original)：使用另外一个字符串创建并初始化一个新的 String 对象。 String(StringBuffer buffer)：使用可变字符串对象（StringBuffer）创建并初始化一个新的String对象 String(StringBuilder builder)：使用可变字符串对象（StringBuilder）创建并初始化一个新的String 对象 String(byte[] bytes)：使用平台的默认字符集解码指定的byte数组，通过byte数组创建并初始化一个新的 String 对象 String(char[] value)：通过字符数组创建并初始化一个新的 String 对象。 String(char[] value, int offset, int count)：通过字符数组的子数组创建并初始化一个新的 String 对象；offset参数是子数组第一个字符的索引，count参数指定子数组的长度 可变字符串（字符串缓冲区） StringBuffer（可变字符串） StringBuffer是线程安全的，它的方法是支持线程同步 ，线程同步会操作串行顺序执行，在单线程环境下会影响效率。StringBuilder是StringBuffer单线程版本，Java 5之后发布的，它不是线程安全的，但它的执行效率很高。 StringBuilder（可变字符串） StringBuilder()：创建字符串内容是空的StringBuilder对象，初始容量默认为16个字符。 StringBuilder(CharSequence seq)：指定CharSequence字符串创建StringBuilder对象。CharSequence接口类型，它的实现类有：String、StringBuffer和StringBuilder等，所以参数seq可以是String、StringBuffer和StringBuilder等类型。 StringBuilder(int capacity)：创建字符串内容是空的StringBuilder对象，初始容量由参数capacity指定的。 StringBuilder(String str)：指定String字符串创建StringBuilder对象。 StringBuilder在提供了很多修改字符串缓冲区的方法，追加、插入、删除和替换等 字符串追加 字符串追加方法是append，append有很多重载方法，可以追加任何类型数据，它的返回值还是StringBuilder 字符串插入、删除、替换 StringBuilder insert(int offset, String str)：在字符串缓冲区中索引为offset的字符位置之前插入str，insert有很多重载方法，可以插入任何类型数据 StringBuffer delete(int start, int end)：在字符串缓冲区中删除子字符串，要删除的子字符串从指定索引start开始直到索引end - 1处的字符。start和end两个参数与substring(int beginIndex, intendIndex)方法中的两个参数含义一样 StringBuffer replace(int start, int end, String str)字符串缓冲区中用str替换子字符串，子字符串从指定索引start开始直到索引end - 1处的字符。start和end同delete(int start, int end)方法 字符串池 Java中的不可变字符串String常量，采用字符串池（String Pool）管理技术，字符串池是一种字符串驻留技术 2个字符串常量赋值同一个值，他们是相同的引用，指向同一个对象 new关键字创建2个字符串对象，是不同的引用，指向不同的对象 字符串操作 字符串拼接 拼接是会产生一个新的对象。 String字符串拼接可以使用+运算符或String的concat(String str)方法。 concat方法定义：public String concat(String str) Java中所有对象都有一个toString()方法，该方法可以将对象转换为字符串，拼接过程会调用该对象的toString()方法，将该对象转换为字符串后再进行拼接。 String的charAt(int index)方法可以返回索引index所在位置的字符 +运算符优势是可以连接任何类型数据拼接成为字符串，而concat方法只能拼接String类型字符串。 字符串查找 indexOf方法 int indexOf(int ch)：从前往后搜索字符ch，返回第一次找到字符ch所在处的索引。 int indexOf(int ch, int fromIndex)：从指定的索引开始从前往后搜索字符ch，返回第一次找到字符ch所在处的索引。 int indexOf(String str)：从前往后搜索字符串str，返回第一次找到字符串所在处的索引。 int indexOf(String str, int fromIndex)：从指定的索引开始从前往后搜索字符串str，返回第一次找到字符串所在处的索引。 lastIndexOf方法 int lastIndexOf(int ch)：从后往前搜索字符ch，返回第一次找到字符ch所在处的索引。 int lastIndexOf(int ch, int fromIndex)：从指定的索引开始从后往前搜索字符ch，返回第一次找到字符ch所在处的索引。 int lastIndexOf(String str)：从后往前搜索字符串str，返回第一次找到字符串所在处的索引。 int lastIndexOf(String str, int fromIndex)：从指定的索引开始从后往前搜索字符串str，返回第一次找到字符串所在处的索引 字符串比较 比较相等，String提供的比较字符串相等的方法： boolean equals(Object anObject)：比较两个字符串中内容是否相等。 boolean equalsIgnoreCase(String anotherString)：类似equals方法，只是忽略大小写。 比较大小，有时不仅需要知道是否相等，还要知道大小，String提供的比较大小的方法： int compareTo(String anotherString)：按字典顺序比较两个字符串。如果参数字符串等于此字符串，则返回值 0；如果此字符串小于字符串参数，则返回一个小于 0 的值；如果此字符串大于字符串参数，则返回一个大于 0 的值。 int compareToIgnoreCase(String str)：类似compareTo，只是忽略大小写。 比较前缀和后缀 boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束。 boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始。 字符串截取 String substring(int beginIndex)：从指定索引beginIndex开始截取一直到字符串结束的子字符串 String substring(int beginIndex, int endIndex)：从指定索引beginIndex开始截取直到索引endIndex -1处的字符，注意包括索引为beginIndex处的字符，但不包括索引为endIndex处的字符 String还提供了字符串分割方法，split(“ “)方法，参数是分割字符串，返回值String[] API文档 Java8在线api文档地址：https://docs.oracle.com/javase/8/docs/api/ 文档页面中各部分的含义 类和接口中，斜文字体显示是接口，正常字体才是类 “字段摘要”描述了类中的实例变量和静态变量 “构造方法摘要”描述了类中所有构造方法 “方法摘要”描述了类中所有方法 查询API的一般流程：找包→找类或接口→查看类或接口→找方法或变量","categories":[{"name":"Java","slug":"Java","permalink":"https://zql-gl.github.io/categories/Java/"}],"tags":[{"name":"知识文档","slug":"知识文档","permalink":"https://zql-gl.github.io/tags/%E7%9F%A5%E8%AF%86%E6%96%87%E6%A1%A3/"}]},{"title":"博客与博主","slug":"01-博客诞生","date":"2022-08-20T13:00:00.000Z","updated":"2022-08-23T14:25:25.998Z","comments":true,"path":"posts/1.html","link":"","permalink":"https://zql-gl.github.io/posts/1.html","excerpt":"","text":"相遇皆是缘分 为什么建博客？想拥有一个自己的博客，好进行装逼! 展望博客将一些自己搜集到的资料或学习到的东西整理成博客，上传上来，方便查阅。 关于博主我取名叫从未，这是源于一句话，你喜欢过我吗？– 从未 《自由与爱情》---作者:裴多菲 ​ 生命诚可贵 ​ 爱情价更高 ​ 若为自由故 ​ 二者皆可抛 溜溜球啦！","categories":[{"name":"生活","slug":"生活","permalink":"https://zql-gl.github.io/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"想法","slug":"想法","permalink":"https://zql-gl.github.io/tags/%E6%83%B3%E6%B3%95/"}]}],"categories":[{"name":"Java","slug":"Java","permalink":"https://zql-gl.github.io/categories/Java/"},{"name":"生活","slug":"生活","permalink":"https://zql-gl.github.io/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"知识文档","slug":"知识文档","permalink":"https://zql-gl.github.io/tags/%E7%9F%A5%E8%AF%86%E6%96%87%E6%A1%A3/"},{"name":"想法","slug":"想法","permalink":"https://zql-gl.github.io/tags/%E6%83%B3%E6%B3%95/"}]}