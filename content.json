{"meta":{"title":"孤寡杂货铺","subtitle":"学习资料库","description":"众里寻她千百度。蓦然回首，那人却在，灯火阑珊处。","author":"从未","url":"https://zql-gl.github.io","root":"/"},"pages":[{"title":"关于本站","date":"2020-04-19T04:58:56.000Z","updated":"2022-08-22T12:07:00.999Z","comments":false,"path":"about/index.html","permalink":"https://zql-gl.github.io/about/index.html","excerpt":"","text":"曲终人未散“ 为一个不可能的缘，等一个不可能的人。许一个不可能的愿，留一个不可能的念。 “ 从未离去！ 纸凉薄，写我半生彷惶;一纸沧桑，书我一世独殇;一纸微黄;记我此生风霜 伤感 。 寒雨绵绵夜何长，漫漫长夜吾孤赏；天阶夜色凉如水，斜风细雨不得归 离别 。 因为生活太无常，故此努力保留琐碎的东西，抓住它们，也似抓住了根 摆烂 。 联系我QQ：1732065436 （又是emo的一天！） 座右铭：十年生死两茫茫，不思量，自难忘。"},{"title":"标签","date":"2020-11-24T07:14:39.000Z","updated":"2021-07-26T14:44:42.337Z","comments":false,"path":"tags/index.html","permalink":"https://zql-gl.github.io/tags/index.html","excerpt":"","text":""},{"title":"archives","date":"2019-10-24T16:00:00.000Z","updated":"2021-06-27T12:40:24.587Z","comments":true,"path":"archives/index.html","permalink":"https://zql-gl.github.io/archives/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-11-24T07:12:19.000Z","updated":"2021-07-26T14:44:28.785Z","comments":false,"path":"categories/index.html","permalink":"https://zql-gl.github.io/categories/index.html","excerpt":"","text":""},{"title":"留言板","date":"2020-10-31T02:11:28.000Z","updated":"2021-11-23T10:50:01.880Z","comments":false,"path":"comments/index.html","permalink":"https://zql-gl.github.io/comments/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-06-07T14:17:49.000Z","updated":"2021-07-27T07:31:10.990Z","comments":true,"path":"link/index.html","permalink":"https://zql-gl.github.io/link/index.html","excerpt":"","text":""},{"title":"我的歌单","date":"2019-05-17T08:14:00.000Z","updated":"2021-07-26T13:06:52.537Z","comments":true,"path":"music/index.html","permalink":"https://zql-gl.github.io/music/index.html","excerpt":"","text":""},{"title":"","date":"2019-08-10T08:41:10.000Z","updated":"2021-07-26T07:32:29.746Z","comments":false,"path":"List/movies/index.html","permalink":"https://zql-gl.github.io/List/movies/index.html","excerpt":"","text":"励志视频"},{"title":"Music-BBOX","date":"2020-04-23T04:58:56.000Z","updated":"2021-07-26T07:32:21.052Z","comments":false,"path":"List/music/index.html","permalink":"https://zql-gl.github.io/List/music/index.html","excerpt":"","text":""},{"title":"相册","date":"2022-08-26T17:08:11.290Z","updated":"2022-08-26T17:08:11.290Z","comments":false,"path":"List/gallery/index.html","permalink":"https://zql-gl.github.io/List/gallery/index.html","excerpt":"","text":"秀色可餐 被欲望蒙蔽的人 古风流年 你是我古风里的墨，长词勾勒。你是我古风里的山河，落笔成客。你是我借韵描摹的那一抹砚中水色，谁来与和？若今生倾酒醉我半身萧瑟，与你折月写尽诗中平仄，聚散离合。"},{"title":"","date":"2021-09-28T14:56:14.000Z","updated":"2022-08-23T14:19:16.439Z","comments":false,"path":"List/gallery/ohmygirl/index.html","permalink":"https://zql-gl.github.io/List/gallery/ohmygirl/index.html","excerpt":"","text":""},{"title":"","date":"2021-09-28T14:56:13.000Z","updated":"2021-10-14T02:11:35.135Z","comments":false,"path":"List/gallery/wallpaper/index.html","permalink":"https://zql-gl.github.io/List/gallery/wallpaper/index.html","excerpt":"","text":""}],"posts":[{"title":"Java基础知识","slug":"02-Java基础知识","date":"2022-10-20T15:00:00.000Z","updated":"2022-10-20T15:46:14.286Z","comments":true,"path":"posts/2.html","link":"","permalink":"https://zql-gl.github.io/posts/2.html","excerpt":"","text":"Java基础知识Java语法基础标识符 标识符就是变量、常量、方法、枚举、类、接口等由程序员指定的名字。构成标识符的字母均有一定的规范，Java语言中标识符的命名规则如下 01.区分大小写：Myname与myname是两个不同的标识符。 首字符，可以是下划线（_）或美元符或字母，但不能是数字。 除首字符外其他字符，可以是下划线（_）、美元符、字母和数字。 关键字不能作为标识符。 Java关键字 访问控制 private 私有的 public 公共的 default 默认 protected 受保护的 类、方法和变量修饰符 abstract 声明抽象 class 类 extends 扩充,继承 final 最终值,不可改变的 implements 实现（接口） interface 接口 native 本地，原生方法（非 Java 实现） new 新,创建 static 静态 strictfp 严格,精准 synchronized 线程,同步 transient 短暂 volatile 易失 程序控制语句 break 跳出循环 case 定义一个值以供 switch 选择 continue 继续 do 运行 else 否则 for 循环 if 如果 instanceof 实例 return 返回 switch 根据值选择执行 while 循环 错误处理 assert 断言表达式是否为真 catch 捕捉异常 finally 有没有异常都执行 throw 抛出一个异常对象 throws 声明一个异常可能被抛出 try 捕获异常 包相关 import 引入 package 包 基本类型 boolean 布尔型 char 字符型 double 双精度浮点 byte 字节型 float 单精度浮点 int 整型 short 短整型 long 长整型 变量引用 super 父类，超类 void 无返回值 this 本类 保留关键字 goto 是关键字，但不能使用 const 是关键字，但不能使用 分隔符 在Java源代码中，有一些字符被用作分隔，称为分隔符。分隔符主要有：分号（;）、左右大括号（{}）和空白。 Java的常量与变量 Java常量 常量在声明的同时需要赋予一个初始值，声明格式：final 数据类型 变量名 = 初始值; 使用final关键字来修饰常量，声明方式和变量类似，通常用大写字母表示常量 字符串常量包含在两个引号之间的字符序列，和字符变量都可以包含任何Unicode字符 定义变量的时候，如果加上final修饰符，这个变量就变成了常量 Java 的 null 不是关键字，类似于 true 和 false，它是一个字面常量，不允许作为标识符使用 分类 静态常量 在final 之前使用public static修饰，用来替代保留字const。 public static修饰的常量作用域是全局的，不需要创建对象就可以访问它，在类外部访问形式：HelloWorld. PI （类名.常量名） 成员常量 局部常量 Java变量 类变量（静态变量）：独立于方法之外的变量，用 static 修饰。 类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。 无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。 静态变量除了被声明为常量外很少使用，静态变量是指声明为 public/private，final 和 static 类型的变量。静态变量初始化后不可改变。 静态变量储存在静态存储区。经常被声明为常量，很少单独使用 static 声明变量。 静态变量在第一次被访问时创建，在程序结束时销毁。 与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为 public 类型。 默认值和实例变量相似。数值型变量默认值是 0，布尔型默认值是 false，引用类型默认值是 null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。 静态变量可以通过：ClassName.VariableName的方式访问。 类变量被声明为 public static final 类型时，类变量名称一般建议使用大写字母。如果静态变量不是 public 和 final 类型，其命名方式与实例变量以及局部变量的命名方式一致。 实例（成员）变量：独立于方法之外的变量，不过没有 static 修饰。成员变量是在类体中，而在方法之外，作用域是整个类，如果没有赋初始值，系统使用默认值 成员变量声明在一个类中，但在方法、构造方法和语句块之外； 当一个对象被实例化之后，每个实例变量的值就跟着确定； 成员变量在对象创建的时候创建，在对象被销毁的时候销毁； 成员变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息； 实例变量可以声明在使用前或者使用后； 访问修饰符可以修饰实例变量； 实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见； 实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定； 实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObjectReference.VariableName。 局部变量：是在方法或if、for和while等代码块中声明的变量。 局部变量声明在方法、构造方法或者语句块中； 局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁； 访问修饰符不能用于局部变量； 局部变量只在声明它的方法、构造方法或者语句块中可见； 局部变量是在栈上分配的。 局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。 Java编码规范命名规范（驼峰命名） 小驼峰命名 小驼峰法就是第一个单词是全部小写，后面的单词首字母大写 大驼峰命名 大驼峰法是第一个单词的首字母也大写 除了包和常量外，Java编码规范命名方法采用驼峰法 包名：包名是全小写字母，中间可以由点分隔开。作为命名空间，包名应该具有唯一性 常量名：全大写，如果是由多个单词构成，可以用下划线隔开如YEAR和WEEK_OF_MONTH。 类和接口名：采用大驼峰法 文件名：采用大驼峰法 变量：采用小驼峰法 方法名：采用小驼峰法 注释规范 文档注释：/** */ 文档注释就是指这种注释内容能够生成API帮助文档，JDK中javadoc命令能够提取这些注释信息并生成HTML文件。文档注释主要对类（或接口）、实例变量、静态变量、实例方法和静态方法等进行注释。 生成文档后，会生成很多HTML文件，其中的index.html文件是文档的入口 多行注释 /* */ 单行注释 // 代码排版 空行用以将逻辑相关的代码段分隔开，以提高可读性，空行使用规范： 类声明和接口声明之间保留两个空行 两个方法之间保留一个空行 方法的第一条语句之前保留一个空行 代码注释（尾端注释外）之前保留一个空行 一个方法内的两个逻辑段之间 代码中的有些位置是需要有空格的，空格的规范： 赋值符号“=”前后各有一个空格 所有的二元运算符都应该使用空格与操作数分开 一元操作符：负号“-”、自增“++”和自减“–”等，它们与操作数之间没有空格 小左括号“(”之后，小右括号“)”之前不应有空格 大左括号“{”之前有一个空格 方法参数列表小左括号“(”之前没有空格，小右括号“)”之后有一个空格，参数列表中参数逗号“,”之后也有一个空格。 关键字之后紧跟着小左括号“(”，关键字之后应该有一个空格 缩进的规范 在方法、Lambda、控制语句等包含大括号“{}”的代码块中，代码块的内容相对于首行缩进一个级别（4个空格） 如果是if语句中条件表达式的断行，那么新的一行应该相对于上一行缩进两个级别（8个空格），再往后的断行要与第一次的断行对齐 一行代码的长度应尽量不要超过80个字符，如果超过则需断行，断行的规范 在一个逗号后面断开。 在一个操作符前面断开，要选择较高级别的运算符（而非较低级别的运算符）断开。 新的一行应该相对于上一行缩进两个级别（8个空格）。 其他规范 在声明变量或常量时推荐一行一个声明 左大括号“{”位于声明语句同行的末尾。右大括号“}”另起一行，与相应的声明语句对齐，除非是一个空语句，右大括号“}”应紧跟在左大括号“{”之后 每行至多包含一条语句 虽然Java语言允许if、for等控制语句只有一行代码情况下，省略左右两个大括号，但是编码规范并不推荐这样使用 数据类型基本数据类型 数值类型 整数类型（默认int） byte：8位，默认是0 short：2个字节，默认是0 int：4个字节，默认是0 long：8个字节，默认是0L 浮点数类型（默认double） float：4个字节，默认是0.0f double：8个字节,默认是0.0d 字符类型 char:2个字节，范围\\u0000(0)~\\uffff(65535),默认值是’u0000’ 字符常量必须用单引号括起来的单个字符 布尔类型 boolean：true or false,默认是false 转义字符 \\n:换行（0x0a） \\r：回车（0x0d） \\t 制表符 \\f：换页符（0x0c） \\b 退格 (0x08) \\0 空字符 (0x0) \\s 空格 (0x20) \" 双引号 ' 单引号 \\ 反斜杠 \\ddd 八进制字符 (ddd) \\uxxxx 16进制Unicode字符 (xxxx) 数据类型转换 自动类型转换 整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。转换从低级到高级：byte,short,char—&gt; int —&gt; long—&gt; float —&gt; double 规则：1. 不能对boolean类型进行类型转换。 不能把对象类型转换成不相关类的对象。 在把容量大的类型转换为容量小的类型时必须使用强制类型转换。 转换过程中可能导致溢出或损失精度 浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入 强制类型转换 条件是转换的数据类型必须是兼容的。 格式：(type)value type是要强制类型转换后的数据类型 隐含强制类型转换 1、 整数的默认类型是 int。 小数默认是 double 类型浮点型，在定义 float 类型时必须在数字后面跟上 F 或者 f。 数字表示方式 进制数字表示方式 二进制数：以 0b 或0B为前缀，注意0是阿拉伯数字，不要误认为是英文字母o。 八进制数：以0为前缀，注意0是阿拉伯数字。 十六进制数：以 0x 或0X为前缀，注意0是阿拉伯数字 指数表示 如果采用十进制表示指数，需要使用大写或小写的e表示幂，e2表示10的2次方。 引用数据类型（String）引用数据类型变量中保持的是指向对象的内存地址（引用数据类型在使用之前一定要：声明和初始化）默认值是null 类 接口 数组 元素数据类型[] 数组变量名; 推荐使用这种声明方式 运算符算术运算符 一元运算 -（取反）、++（自增）、–（自减） 前缀自增自减法(++a,–a): 先进行自增或者自减运算，再进行表达式运算。 后缀自增自减法(a++,a–): 先进行表达式运算，再进行自增或者自减运算 二元运算 +、-、*、/、% 位运算符 &amp;（位与）、|（位或）、~（位反）、^(位异或)、&lt;&lt;（左移）、&gt;&gt;（有符号右移）、&gt;&gt;&gt;（无符号右移）、&amp;=（位与等于）、|=（位或等于）、^=（位异或等于）、&lt;&lt;=（左移等于）、&gt;&gt;=（右移等于）、&gt;&gt;&gt;=（右移等于） 关系运算符 ==、!=、&gt;、&lt;、&gt;=、&lt;= 逻辑运算符 !（逻辑非）、&amp;（逻辑与）、|（逻辑或）、&amp;&amp;（短路与）、||（短路或） 赋值运算符 算术赋值运算符 +=、-=、*=、/=、%= 其他运算符 三元运算符 (?:) variable x = (expression) ? value if true : value if false 三元运算符（? :）。例如x?y:z;，其中x、y和z都为表达式。 instanceof 运算符 该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型） instanceof运算符使用格式:( Object reference variable ) instanceof (class/interface type) 小括号。起到改变表达式运算顺序的作用，它的优先级最高。 中括号。数组下标。 引用号（.）。对象调用实例变量或实例方法的操作符，也是类调用静态变量或静态方法的操作符。 赋值号（=）。赋值是用等号运算符（=）进行的。 new。对象内存分配运算符。 箭头（-&gt;）。Java 8新增加的，用来声明Lambda表达式。 双冒号（::）。Java 8新增加的，用于Lambda表达式中方法的引用。 控制语句分支（条件）语句 if语句 if语句 if(布尔表达式){//如果布尔表达式为true将执行的语句} 如果布尔表达式的值为 true，则执行 if 语句中的代码块，否则执行 if 语句块后面的代码。 if…else语句 if(布尔表达式){//如果布尔表达式的值为true}else{//如果布尔表达式的值为false} if 语句后面可以跟 else 语句，当 if 语句的布尔表达式值为 false 时，else 语句块会被执行。 if…else if…else 语句 if(布尔表达式 1){//如果布尔表达式 1的值为true执行代码}else if(布尔表达式 2){//如果布尔表达式 2的值为true执行代码}else if(布尔表达式 3){//如果布尔表达式 3的值为true执行代码}else {//如果以上布尔表达式都不为true执行代码} if 语句至多有 1 个 else 语句，else 语句在所有的 else if 语句之后。 if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。 一旦其中一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行。 switch case 语句 switch(expression){case value1: //语句 break; //可选case value2: //语句 break; //可选//你可以有任意数量的case语句default : //可选 //语句} 规则 switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。 switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。 case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。 当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。 当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。 switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。 switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。 循环语句 while 循环 while( 布尔表达式 ) { //循环内容} 只要布尔表达式为 true，循环就会一直执行下去 如果循环体中需要循环变量，就必须在while语句之前对循环变量进行初始化 do…while 循环 do { //代码语句}while(布尔表达式); 对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。 布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。 for 循环 for(初始化; 布尔表达式; 更新) {//代码语句} 最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。 然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。 执行一次循环后，更新循环控制变量。 再次检测布尔表达式。循环执行上面的过程。 Java 增强 for 循环–for-each语句 Java5 引入了一种主要用于数组的增强型 for 循环。遍历集合使用for-each比较方便 for(声明语句 : 表达式){//代码句子} 声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。 表达式：表达式是要访问的数组名，或者是返回值为数组的方法。 跳转语句 break语句 break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。 break 跳出最里层的循环，并且继续执行该循环下面的语句。 break还可以配合标签使用，多层循环的时候想要跳出外循环，可以为外循环添加一个标签，注意在定义标签的时候后面跟一个冒号，程序会跳转出标签所指定的循环 continue语句 continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。 在 for 循环中，continue 语句使程序立即跳转到更新语句。 在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。 默认情况下，continue只会跳出最近的内循环，可以为外循环添加一个标签，continue语句后面指定这个标签，这样当条件满足执行continue语句时，程序就会跳转出外循环。 return语句 throw语句 数组一维数组 声明语法：元素数据类型[] 数组变量名; 数组初始化 静态初始化 将数组的元素放到大括号中，元素之间用逗号（,）分隔 动态初始化 动态初始化使用new运算符分配指定长度的内存空间， 语法： new 元素数据类型[数组长度] ; 二维数组 声明语法：元素数据类型[][] 数组变量名; 二维数组初始化 静态初始化 int intArray[][] = { { 1, 2, 3 }, { 11, 12, 13 }, { 21, 22, 23 }, { 31, 32, 33 } }; 动态初始化 new 元素数据类型[高维数组长度] [低维数组长度] ; 不规则数组 高维数组元素个数确定，但是低维数组元素个数不同 动态初始化不规则数组比较麻烦，初始化4×3二维数组，不能使用new int[4][3]语句，而是先初始化高维数组，然后再分别逐个初始化低维数组 int intArray[][] = new int[4][]; //先初始化高维数组为4//逐一初始化低维数组intArray[0] = new int[2];intArray[1] = new int[1];intArray[2] = new int[3];intArray[3] = new int[3]; 字符串含义：Java中的字符串是由双引号括起来的多个字符，Java中的字符采用Unicode编码 “” 空字符串不是null，空字符串是有分配内存空间的，而null是没有分配内存空间的。 获得字符串长度方法是length() 字符串类 String（不可变字符串），属于java.lang包，创建String对象可以通过构造方法实现，常用的构造方法 String()：使用空字符串创建并初始化一个新的String对象。 String(String original)：使用另外一个字符串创建并初始化一个新的 String 对象。 String(StringBuffer buffer)：使用可变字符串对象（StringBuffer）创建并初始化一个新的String对象 String(StringBuilder builder)：使用可变字符串对象（StringBuilder）创建并初始化一个新的String 对象 String(byte[] bytes)：使用平台的默认字符集解码指定的byte数组，通过byte数组创建并初始化一个新的 String 对象 String(char[] value)：通过字符数组创建并初始化一个新的 String 对象。 String(char[] value, int offset, int count)：通过字符数组的子数组创建并初始化一个新的 String 对象；offset参数是子数组第一个字符的索引，count参数指定子数组的长度 StringBuffer（可变字符串） StringBuilder（可变字符串） 字符串池 Java中的不可变字符串String常量，采用字符串池（String Pool）管理技术，字符串池是一种字符串驻留技术 2个字符串常量赋值同一个值，他们是相同的引用，指向同一个对象 new关键字创建2个字符串对象，是不同的引用，指向不同的对象 字符串操作 字符串拼接 拼接是会产生一个新的对象。 String字符串拼接可以使用+运算符或String的concat(String str)方法。 concat方法定义：public String concat(String str) Java中所有对象都有一个toString()方法，该方法可以将对象转换为字符串，拼接过程会调用该对象的toString()方法，将该对象转换为字符串后再进行拼接。 String的charAt(int index)方法可以返回索引index所在位置的字符 +运算符优势是可以连接任何类型数据拼接成为字符串，而concat方法只能拼接String类型字符串。 字符串查找 indexOf方法 int indexOf(int ch)：从前往后搜索字符ch，返回第一次找到字符ch所在处的索引。 int indexOf(int ch, int fromIndex)：从指定的索引开始从前往后搜索字符ch，返回第一次找到字符ch所在处的索引。 int indexOf(String str)：从前往后搜索字符串str，返回第一次找到字符串所在处的索引。 int indexOf(String str, int fromIndex)：从指定的索引开始从前往后搜索字符串str，返回第一次找到字符串所在处的索引。 lastIndexOf方法 int lastIndexOf(int ch)：从后往前搜索字符ch，返回第一次找到字符ch所在处的索引。 int lastIndexOf(int ch, int fromIndex)：从指定的索引开始从后往前搜索字符ch，返回第一次找到字符ch所在处的索引。 int lastIndexOf(String str)：从后往前搜索字符串str，返回第一次找到字符串所在处的索引。 int lastIndexOf(String str, int fromIndex)：从指定的索引开始从后往前搜索字符串str，返回第一次找到字符串所在处的索引 字符串比较 比较相等，String提供的比较字符串相等的方法： boolean equals(Object anObject)：比较两个字符串中内容是否相等。 boolean equalsIgnoreCase(String anotherString)：类似equals方法，只是忽略大小写。 比较大小，有时不仅需要知道是否相等，还要知道大小，String提供的比较大小的方法： int compareTo(String anotherString)：按字典顺序比较两个字符串。如果参数字符串等于此字符串，则返回值 0；如果此字符串小于字符串参数，则返回一个小于 0 的值；如果此字符串大于字符串参数，则返回一个大于 0 的值。 int compareToIgnoreCase(String str)：类似compareTo，只是忽略大小写。 比较前缀和后缀 boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束。 boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始。 字符串截取 API文档 Java8在线api文档地址：https://docs.oracle.com/javase/8/docs/api/ 文档页面中各部分的含义 类和接口中，斜文字体显示是接口，正常字体才是类 “字段摘要”描述了类中的实例变量和静态变量 “构造方法摘要”描述了类中所有构造方法 “方法摘要”描述了类中所有方法 查询API的一般流程：找包→找类或接口→查看类或接口→找方法或变量","categories":[{"name":"Java","slug":"Java","permalink":"https://zql-gl.github.io/categories/Java/"}],"tags":[{"name":"知识文档","slug":"知识文档","permalink":"https://zql-gl.github.io/tags/%E7%9F%A5%E8%AF%86%E6%96%87%E6%A1%A3/"}]},{"title":"博客与博主","slug":"01-博客诞生","date":"2022-08-20T13:00:00.000Z","updated":"2022-08-23T14:25:25.998Z","comments":true,"path":"posts/1.html","link":"","permalink":"https://zql-gl.github.io/posts/1.html","excerpt":"","text":"相遇皆是缘分 为什么建博客？想拥有一个自己的博客，好进行装逼! 展望博客将一些自己搜集到的资料或学习到的东西整理成博客，上传上来，方便查阅。 关于博主我取名叫从未，这是源于一句话，你喜欢过我吗？– 从未 《自由与爱情》---作者:裴多菲 ​ 生命诚可贵 ​ 爱情价更高 ​ 若为自由故 ​ 二者皆可抛 溜溜球啦！","categories":[{"name":"生活","slug":"生活","permalink":"https://zql-gl.github.io/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"想法","slug":"想法","permalink":"https://zql-gl.github.io/tags/%E6%83%B3%E6%B3%95/"}]}],"categories":[{"name":"Java","slug":"Java","permalink":"https://zql-gl.github.io/categories/Java/"},{"name":"生活","slug":"生活","permalink":"https://zql-gl.github.io/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"知识文档","slug":"知识文档","permalink":"https://zql-gl.github.io/tags/%E7%9F%A5%E8%AF%86%E6%96%87%E6%A1%A3/"},{"name":"想法","slug":"想法","permalink":"https://zql-gl.github.io/tags/%E6%83%B3%E6%B3%95/"}]}